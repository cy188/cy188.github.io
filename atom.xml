<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cy_blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-16T16:34:00.463Z</updated>
  <id>http://example.com/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode</title>
    <link href="http://example.com/2021/04/17/3-LeetCode/"/>
    <id>http://example.com/2021/04/17/3-LeetCode/</id>
    <published>2021-04-16T16:05:44.000Z</published>
    <updated>2021-04-16T16:34:00.463Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode练习</p><span id="more"></span><h2 id="反转链表-206"><a href="#反转链表-206" class="headerlink" title="反转链表_206"></a>反转链表_206</h2><p>题目描述：<br>反转一个单链表<br>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;NULL</span><br><span class="line">输出: <span class="number">5</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure><p>题解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代法，就是遍历链表，然后对每一个节点进行反转</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span> <span class="comment">// pre用来保存上一个节点</span></span><br><span class="line">    <span class="keyword">let</span> cur = head <span class="comment">// cur用来保存当前操作的节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行循环，当cur为null时，说明循环完链表了</span></span><br><span class="line">    <span class="keyword">while</span>(cur !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> next = cur.next <span class="comment">// 先将cur的下一个节点保存下来</span></span><br><span class="line">        cur.next = pre <span class="comment">// 然后把cur的next指向pre节点</span></span><br><span class="line">        pre = cur <span class="comment">// 然后把cur赋值给pre</span></span><br><span class="line">        cur = next <span class="comment">// 再把上面保存的next赋值给cur当前操作的节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pre <span class="comment">// 返回pre，pre是新链表的头节点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组中的第K个最大元素-215"><a href="#数组中的第K个最大元素-215" class="headerlink" title="数组中的第K个最大元素_215"></a>数组中的第K个最大元素_215</h2><p>题目描述：<br>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。<br>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>] 和 k = <span class="number">2</span></span><br><span class="line">输出: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>说明：<br>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p><p>题解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先对数组进行降序排列，然后取第k个元素即可</span></span><br><span class="line"><span class="comment">// 库函数就是好用啊</span></span><br><span class="line"><span class="keyword">var</span> findKthLargest = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  nums.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b - a) <span class="comment">// 降序排列nums数组(升序排列写法为 a - b)</span></span><br><span class="line">  <span class="keyword">return</span> nums[k - <span class="number">1</span>] <span class="comment">// 返回目标元素</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;LeetCode练习&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中文文档-4.2</title>
    <link href="http://example.com/2021/04/09/2-TypeScript%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3-4.2/"/>
    <id>http://example.com/2021/04/09/2-TypeScript%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3-4.2/</id>
    <published>2021-04-09T12:53:17.000Z</published>
    <updated>2021-04-16T18:09:59.493Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript 是一种开源语言，它建立在 JavaScript (世界上最常用的工具之一)的基础上，通过添加静态类型定义的方式来验证代码是否正常工作。</p><span id="more"></span><h1 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>JavaScript 中的每个值都有一组行为，你可以通过运行不同的操作来了解它们。这听起来很抽象，但是作为一个简单的例子，考虑一下我们可能在一个名为 <code>message</code> 的变量上运行的一些操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用message变量的toLowerCase属性</span></span><br><span class="line">message.toLowerCase();</span><br><span class="line"><span class="comment">// 调用&#x27;message&#x27;</span></span><br><span class="line">message();</span><br></pre></td></tr></table></figure><p>如果我们分解它，第一行可运行的代码访问一个名为 <code>toLowerCase</code> 的属性，然后调用它。第二个试图直接调用 <code>message</code>。但是假设我们不知道 <code>message</code> 的值（这是很常见的），我们不能准确地说我们试图运行这些代码会得到什么结果。每个操作的行为完全取决于我们最初拥有的值。</p><ul><li><code>message</code> 是不是可调用的？</li><li>它是否有个 <code>toLowerCase</code> 属性？</li><li>如果这两个值都是可调用的，它们返回值是什么？</li></ul><p>这些问题的答案通常是我们在编写 JavaScript 时脑子里的东西，我们必须希望所有的细节都是正确的。<br>让我们假设<code>message</code>是以下面的方式定义的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure><p>正如你可能猜到的那样，如果我们尝试运行 <code>message.toLowerCase()</code> ，将会得到 <code>message</code> 的小写字符串。<br>如果你熟悉 JavaScript，你会知道第二行代码是错误的，并且会报错信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: message is not a function</span><br></pre></td></tr></table></figure><p>如果我们能避免这样的错误就好了。<br>当我们运行代码时，JavaScript 运行时可以弄清楚值的类型——它具有哪些行为和功能。这就是 <code>TypeError</code> 所指出的部分内容（它指出字符串 <code>Hello World</code> 不能作为一个函数来调用）。<br>对于某些值，例如原始类型 <code>string</code> 和 <code>number</code> ，我们可以在运行时使用 <code>typeof</code> 操作符识别它们的类型。但是对于函数之类的其他东西，没有相应的运行时机制来识别它们的类型。例如下面这个函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.flip();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过阅读代码来了解这个函数，该函数只有在给定一个具有可调用的 <code>flip</code> 属性的对象时才能正常工作。但是在代码运行的时候，JavaScript并没有显示这些信息。在纯 JavaScript 中，要知道 <code>fn</code> 对特定值做了什么，唯一的方法就是调用它，然后看看会发生什么。这种行为使得很难在运行它之前预测代码会做什么。<br>这样看来，<code>类型</code> 就是这样一个概念: 描述哪些值可以传递给 <code>fn</code> ，哪些值会崩溃。JavaScript只提供了动态类型。<br>另一种方法是使用静态类型系统解决上面的问题。</p><h3 id="静态类型检查"><a href="#静态类型检查" class="headerlink" title="静态类型检查"></a>静态类型检查</h3><p>回想一下我们前面试图作为一个函数调用 <code>string</code> 时得到的 <code>TypeError</code> 错误。大多数人不喜欢在运行代码时出现任何类型上的错误（这些都被认为是 bug），当我们编写新的代码时，我们应尽最大努力避免引入新的 bug。<br>如果我们只添加一点代码，保存文件，重新运行代码，并能立即看到错误，我们可能能够快速地隔绝问题。但情况并非总是如此。我们可能没有充分地测试这个特性，所以我们可能永远不会真正地遇到一个可能会抛出的潜在错误！或者，如果我们有幸看到了这个错误，我们可能最终会进行大型重构，并被迫加入很多代码来解决这个错误。<br>理想情况下，我们应该有一个工具来帮助我们在代码运行之前找到这些类型错误。这就是TypeScript的静态类型检查器所做的工作。静态类型系统描述了当我们运行程序时我们的值的形状和行为。TypeScript的类型检查器使用这些信息，并告诉我们什么时候可能会出问题。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;hello!&quot;</span>;</span><br><span class="line"></span><br><span class="line">message();</span><br><span class="line"><span class="comment">//ts报错信息</span></span><br><span class="line"><span class="comment">//This expression is not callable.</span></span><br><span class="line"><span class="comment">//Type &#x27;String&#x27; has no call signatures.</span></span><br></pre></td></tr></table></figure><p>使用TypeScript运行上面的示例会在我们运行代码之前给我们一个错误消息。</p><h3 id="无异常错误"><a href="#无异常错误" class="headerlink" title="无异常错误"></a>无异常错误</h3><p>到目前为止，我们一直在讨论某些事情，比如运行时错误（在这种情况下，JavaScript 运行时会告诉我们，它认为某些事情是无意义的）。之所以会出现这些情况，是因为 ECMAScript 规范明确指出，当遇到意外情况时，该语言应该如何工作。<br>例如，规范说，试图调用不可调用的东西应该抛出错误。也许这听起来像是“显而易见的行为”，但是你可能会想到，访问对象上不存在的属性时也应该抛出错误。相反，JavaScript 做出了不同的行为，返回了 <code>undefined</code> ，如下所示:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">&quot;Daniel&quot;</span>,</span><br><span class="line">  age: <span class="number">26</span>,</span><br><span class="line">&#125;;</span><br><span class="line">user.location; <span class="comment">// returns undefined</span></span><br></pre></td></tr></table></figure><p>即使它是“有效的”JavaScript代码，不会立即抛出错误。在TypeScript中，下面的代码会产生一个关于未定义位置的错误，例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">&quot;Daniel&quot;</span>,</span><br><span class="line">  age: <span class="number">26</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">user.location;</span><br><span class="line"><span class="comment">//ts报错信息</span></span><br><span class="line"><span class="comment">//Property &#x27;location&#x27; does not exist on type &#x27;&#123; name: string; age: number; &#125;&#x27;.</span></span><br></pre></td></tr></table></figure><p>虽然有时候会限制写代码的方式，但是我们的目的是在我们的程序中捕捉合法的 bug。而且TypeScript捕捉了很多合法的漏洞，例如：<br><strong>书写错误</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> announcement = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 少打了一个字母</span></span><br><span class="line">announcement.toLocaleLowercase();</span><br><span class="line">announcement.toLocalLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们会认为你可能想写的是这个</span></span><br><span class="line">announcement.toLocaleLowerCase();</span><br></pre></td></tr></table></figure><p><strong>未正确调用的函数</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flipCoin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 应该是Math.random()</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random &lt; <span class="number">0.5</span>;</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Operator &#x27;&lt;&#x27; cannot be applied to types &#x27;() =&gt; number&#x27; and &#x27;number&#x27;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>或者基本的逻辑错误</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span> ? <span class="string">&quot;a&quot;</span> : <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="comment">//下面两个判断条件是一样的效果</span></span><br><span class="line"><span class="keyword">if</span> (value !== <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value === <span class="string">&quot;b&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// This condition will always return &#x27;false&#x27; since the types &#x27;&quot;a&quot;&#x27; and &#x27;&quot;b&quot;&#x27; have no overlap.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 永远不会执行下面的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>在本章中，我们将介绍一些在 JavaScript 代码中最常见的值类型，并说明在 TypeScript 中描述这些类型的方法。这并不是一个详尽的列表，以后的章节将描述更多命名和使用其他类型的方法。<br>类型还可以出现在许多地方，而不仅仅是类型注释。在我们了解类型本身的同时，我们还将学习如何引用这些类型来形成新的结构。<br>首先，我们将回顾一下在编写 JavaScript 或 TypeScript 代码时可能遇到的最基本和最常见的类型，将在以后学习更复杂的类型。</p><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><p><code>string</code>，<code>number</code> 和 <code>boolean</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">let</span> bool: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>类型名称 <code>String</code>，<code>Number</code>，<code>Boolean</code>（以大写字母开头）也是可以的</p></blockquote><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>声明一个数组类型，可以使用 <code>type []</code> 这种形式，<code>type</code>可以是一些原始类型。也可以是 <code>Array&lt;type&gt;</code>的形式，例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>[number]</code> 是另一回事，它是元组，不是数组类型</p></blockquote><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>还有一个特殊类型，<code>any</code>，可以在不希望某个特定值导致类型错误时使用。<br>当一个值的类型是 <code>any</code> 时，你可以访问它的任何属性(反过来也可以是 any 类型的属性) ，像调用函数一样调用它，将它赋给(或从)任何类型的值，或者几乎所有其他在语法上合法的属性:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">any</span> = &#123; <span class="attr">x</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">// 下面的代码不会抛出错误</span></span><br><span class="line"><span class="comment">// 使用 any 将禁用所有进一步的类型检查</span></span><br><span class="line">obj.foo();</span><br><span class="line">obj();</span><br><span class="line">obj.bar = <span class="number">100</span>;</span><br><span class="line">obj = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> n: <span class="built_in">number</span> = obj;</span><br></pre></td></tr></table></figure><p>当你不想仅仅为了让TypeScript相信某一行代码是可行的而写出一个长类型时，<code>any</code> 类型是很有用的，不过一般不建议使用它。</p><h3 id="变量的类型注释"><a href="#变量的类型注释" class="headerlink" title="变量的类型注释"></a>变量的类型注释</h3><p>使用 <code>const</code>、 <code>var</code> 或 <code>let</code> 声明变量时，可以选择添加类型注释以显式指定变量的类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName: <span class="built_in">string</span> = <span class="string">&quot;Alice&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>TypeScript不使用”类型在左边”风格的声明，比如 int x = 0; 类型注释总是紧跟在输入的内容之后。</p></blockquote><p>然而，在大多数情况下，没有必要写变量的类型注释。只要有可能，TypeScript 就会尝试自动推断代码中的类型。例如，变量的类型是基于其初始化器的类型来推断的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要类型注释，&#x27;myName&#x27;推断为类型&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">let</span> myName = <span class="string">&quot;Alice&quot;</span>;</span><br></pre></td></tr></table></figure><p>在大多数情况下，你不需要明确地学习推理的规则。如果你刚开始使用，尝试使用比你想象的更少的类型注释。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数是 JavaScript 中传递数据的主要方式。允许你指定函数的输入和输出值的类型。</p><h4 id="参数类型注释"><a href="#参数类型注释" class="headerlink" title="参数类型注释"></a>参数类型注释</h4><p>在声明函数时，可以在每个参数后面添加类型注释，以声明函数接受哪些类型的参数。参数类型注释跟在参数名后面:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数类型注释</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello, &quot;</span> + name.toUpperCase() + <span class="string">&quot;!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个参数具有类型注释时，该函数的参数将被检查:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果执行，将会出现运行时错误!</span></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">greet(<span class="number">42</span>);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Argument of type &#x27;number&#x27; is not assignable to parameter of type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure><blockquote><p>即使你的参数上没有类型注释，TypeScript 仍然会检查你传递的参数数量是否正确。</p></blockquote><h4 id="返回类型注释"><a href="#返回类型注释" class="headerlink" title="返回类型注释"></a>返回类型注释</h4><p>你也可以添加返回类型注释，返回类型注释会出现在参数列表之后:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFavoriteNumber</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">26</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很像变量类型注释，你通常不需要返回类型注释，因为 TypeScript 将根据函数的返回语句推断其返回类型。上面示例中的类型注释不会改变任何东西。有些代码库为了文档目的，为了防止意外的更改，或者仅仅为了个人喜好，会显式地指定返回类型。</p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>匿名函数与函数声明略有不同。当一个函数出现在可以决定如何调用它的地方时，该函数的参数将自动给定类型，并进行检查。下面是一个例子:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里没有类型注释，但TypeScript可以发现这个错误</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Eve&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数上下文类型</span></span><br><span class="line">names.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里toUppercase方法写错了，应该是toUpperCase</span></span><br><span class="line">  <span class="built_in">console</span>.log(s.toUppercase());</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Property &#x27;toUppercase&#x27; does not exist on type &#x27;string&#x27;. Did you mean &#x27;toUpperCase&#x27;?</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文类型也适用于箭头函数</span></span><br><span class="line">names.forEach(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Error</span></span><br><span class="line">  <span class="built_in">console</span>.log(s.toUppercase());</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Property &#x27;toUppercase&#x27; does not exist on type &#x27;string&#x27;. Did you mean &#x27;toUpperCase&#x27;?</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>尽管参数 <code>s</code> 没有类型注释，但 TypeScript 使用 <code>forEach</code> 函数的类型以及数组的推断类型来确定类型 <code>s</code> 将具有的类型。<br>这个过程称为上下文类型化，因为函数发生的上下文告诉了它应该具有什么类型。与推理规则类似，你不需要明确地了解这种情况是如何发生的，但是知道它确实发生了可以帮助你注意到何时不需要类型注释。稍后，我们将看到更多示例，说明值出现的上下文如何影响其类型。</p><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>除了基本类型之外，最常见的类型是对象类型。要定义对象类型，只需列出其属性及属性的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数的类型注释是一个对象类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printCoord</span>(<span class="params"> pt: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125; </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.x);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.y);</span><br><span class="line">&#125;</span><br><span class="line">printCoord(&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure><p>在这里，我们用具有两个属性(<code>x</code> 和 <code>y</code>)的对象类型对参数进行了注释，这两个属性都是 <code>number</code> 类型。你可以使用 <code>,</code> 或 <code>;</code> 来分隔属性，最后一个分隔符是可选的。<br>对象的每个属性的类型注释也是可选的。如果没有指定类型，则假定它是 <code>any</code> 类型。</p><h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><p>对象类型还可以指定其部分或全部属性是可选的。要做到这一点，只需要在属性后面加个 <code>?</code> ，例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">obj: &#123; first: <span class="built_in">string</span>; last?: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Both OK</span></span><br><span class="line">printName(&#123; <span class="attr">first</span>: <span class="string">&quot;Bob&quot;</span> &#125;);</span><br><span class="line">printName(&#123; <span class="attr">first</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">last</span>: <span class="string">&quot;Alisson&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，如果你访问一个不存在的属性，你会得到一个 <code>undefined</code> 的值，而不是一个运行时错误。因此，当你从可选属性读取时，在使用它之前必须检查该属性是否为 <code>undefined</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">obj: &#123; first: <span class="built_in">string</span>; last?: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Error 如果 obj.last 没有传入的话</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj.last.toUpperCase());</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Object is possibly &#x27;undefined&#x27;.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (obj.last !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// OK</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj.last.toUpperCase());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 也可使用JavaScript新语法 ?. </span></span><br><span class="line">  <span class="built_in">console</span>.log(obj.last?.toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>TypeScript的类型系统允许你使用各种各样的操作符在现有类型的基础上构建新的类型。现在我们知道了如何编写一些基本类型，是时候开始以有趣的方式组合它们了。</p><h4 id="定义联合类型"><a href="#定义联合类型" class="headerlink" title="定义联合类型"></a>定义联合类型</h4><p>组合类型的第一种方法是联合类型。联合类型是由两个或多个其他类型形成的类型，表示可能是其中任何一个类型的值。我们将这些类型中的每一种称为联合成员。<br>让我们编写一个可以操作字符串或数字的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Your ID is: &quot;</span> + id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line">printId(<span class="number">101</span>);</span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line">printId(<span class="string">&quot;202&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">printId(&#123; <span class="attr">myID</span>: <span class="number">22342</span> &#125;);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Argument of type &#x27;&#123; myID: number; &#125;&#x27; is not assignable to parameter of type &#x27;string | number&#x27;.</span></span><br><span class="line"><span class="comment">// Type &#x27;&#123; myID: number; &#125;&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure><h4 id="联合类型的使用"><a href="#联合类型的使用" class="headerlink" title="联合类型的使用"></a>联合类型的使用</h4><p>提供与联合类型匹配的值很容易，只需提供与联合类型的任何成员匹配的类型即可。如果你有一个联合类型的值，你如何使用它？<br>如果联合类型对每个成员类型都有效，则 TypeScript 将只允许你使用公有的部分进行处理。例如，如果你有联合 <code>number | string</code> ，你就不能使用只能在 <code>string</code> 上使用的方法:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Error</span></span><br><span class="line">  <span class="built_in">console</span>.log(id.toUpperCase());</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Property &#x27;toUpperCase&#x27; does not exist on type &#x27;string | number&#x27;.</span></span><br><span class="line">  <span class="comment">// Property &#x27;toUpperCase&#x27; does not exist on type &#x27;number&#x27;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案是用代码进行判断缩小类型范围，就像在 JavaScript 中不使用类型注释一样。当 TypeScript 可以根据代码的结构推断出某个值的更特定的类型时，就会发生收缩。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 在这个分支中，id的类型是 &#x27;string&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(id.toUpperCase());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这里的类型是 &#x27;number&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个例子是使用类似于 <code>Array.isArray</code> 的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">welcomePeople</span>(<span class="params">x: <span class="built_in">string</span>[] | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(x)) &#123;</span><br><span class="line">    <span class="comment">// 这里: &#x27;x&#x27; 是 &#x27;string[]&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello, &quot;</span> + x.join(<span class="string">&quot; and &quot;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这里: &#x27;x&#x27; 是 &#x27;string&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Welcome lone traveler &quot;</span> + x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在 else 分支中，我们不需要做任何特殊的操作——如果 <code>x</code> 不是 <code>number[]</code>，那么它一定是一个 <code>string</code>。<br>有时你会遇到一个所有成员类型都有共同点的联合类型。例如，数组和字符串都有一个 <code>slice</code> 方法。如果联合类型中的每个成员都有一个共同属性，则可以使用该属性而不进行收缩:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回类型推断为 number[] | string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstThree</span>(<span class="params">x: <span class="built_in">number</span>[] | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>我们通过直接在类型注释中编写对象类型和联合类型来使用它们。这很方便，但是通常希望多次使用同一类型并使用单个名称引用它。<br>类型别名就是——任何类型的名称。类型别名的语法是:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Point = &#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和前面的例子完全一样</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printCoord</span>(<span class="params">pt: Point</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.x);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printCoord(&#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>实际上，你可以使用类型别名为任何类型提供名称，而不仅仅是对象类型。例如，类型别名可以命名联合类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ID = <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><p>请注意别名只是别名，你不能使用别名来创建同一类型的不同的”版本”。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口声明是命名对象类型的另一种方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">  z?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printCoord</span>(<span class="params">pt: Point</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.x);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个是&amp;&amp;的短路特性，当z存在的时候，就会执行&amp;&amp;后面的代码</span></span><br><span class="line">  z &amp;&amp; <span class="built_in">console</span>.log(<span class="string">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printCoord(&#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>就像我们上面使用类型别名时一样，这个示例的工作方式就像我们使用了匿名对象类型一样。TypeScript 只关心我们传递给 printCoord 的值的结构，它只关心它是否具有预期的属性。仅仅关注类型的结构和功能，这就是为什么我们称 TypeScript 为结构类型系统。</p><h4 id="类型别名和接口之间的区别"><a href="#类型别名和接口之间的区别" class="headerlink" title="类型别名和接口之间的区别"></a>类型别名和接口之间的区别</h4><p>类型别名和接口非常相似，在许多情况下，你可以在它们之间自由选择。接口的几乎所有特性别名都有，关键区别在于别名不能打开来添加新的属性，而接口总是可扩展的。<br><strong>扩展接口</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Bear <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  honey: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateBear</span>(<span class="params">b: Bear</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">CreateBear(&#123;<span class="attr">name</span>: <span class="string">&#x27;balck&#x27;</span>,<span class="attr">honey</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>通过 <code>&amp;</code> 符号扩展别名</strong><br>相当于合并在一起</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Animal = &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bear = Animal &amp; &#123; </span><br><span class="line">  honey: <span class="built_in">Boolean</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateBear</span>(<span class="params">b: Bear</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">CreateBear(&#123;<span class="attr">name</span>: <span class="string">&#x27;balck&#x27;</span>,<span class="attr">honey</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>向现有的接口添加字段</strong><br>先定义了一个接口，然后再定义一遍，写上不同的字段，就往原来的接口添加了字段</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Window &#123;</span><br><span class="line">  title: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Window &#123;</span><br><span class="line">  ts: TypeScriptAPI</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = <span class="string">&#x27;const a = &quot;Hello World&quot;&#x27;</span>;</span><br><span class="line"><span class="built_in">window</span>.ts.transpileModule(src, &#123;&#125;);</span><br></pre></td></tr></table></figure><p><strong>别名创建后不能更改</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Window = &#123;</span><br><span class="line">  title: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">type</span> Window = &#123;</span><br><span class="line">  ts: TypeScriptAPI</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// 错误: 重复标识符 &#x27;Window&#x27;.</span></span><br></pre></td></tr></table></figure><p>你将在后面的章节中了解更多关于这些概念的内容，所以如果你不能马上理解所有这些内容，也不必担心。</p><ul><li>在TypeScript 4.2版本之前，类型别名可能会出现在错误消息中，有时会代替等价的匿名类型(这可能是也可能不是可取的)。接口总是在错误消息中命名</li><li>类型别名可能不参与声明合并，但接口可以。</li><li>接口只能用于声明对象的形状，不能重新命名原始类型。</li><li>接口名称将始终以其原始形式出现在错误消息中，但仅当它们按名称使用时才会出现。</li></ul><p>在大多数情况下，你可以根据个人喜好进行选择，TypeScript 会告诉你它是否需要其他类型的声明。如果你喜欢启发式，除非你需要别名的特性，其他都可以使用接口。</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>有时候你会知道一个值的类型信息，而 TypeScript 是不知道的。<br>例如，如果你使用 <code>document.getElementById</code> ，TypeScript 只知道这会返回某种类型的 <code>HTMLElement</code>，但是你可能知道你的页面将始终有一个带有给定 ID 的 <code>HTMLCanvasElement</code> 类型。<br>在这种情况下，你可以使用一个类型断言来指定一个更具体的类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main_canvas&quot;</span>) <span class="keyword">as</span> HTMLCanvasElement;</span><br></pre></td></tr></table></figure><p>与类型注释一样，类型断言由编译器移除，不会影响代码的运行时行为。<br>你还可以使用尖括号语法(除非代码位于 <code>.tsx</code> 文件中) ，这是等效的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myCanvas = &lt;HTMLCanvasElement&gt;<span class="built_in">document</span>.getElementById(<span class="string">&quot;main_canvas&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>提醒: 因为类型断言是在编译时删除的，所以不存在与类型断言关联的运行时检查。如果类型断言错误，则不会生成异常或 null。</p></blockquote><p>TypeScript 只允许类型断言转换为更具体或更不具体的类型版本。这条规则可以防止”不可能”的强制性断言，比如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="string">&quot;hello&quot;</span> <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Conversion of type &#x27;string&#x27; to type &#x27;number&#x27; may be a mistake because neither type sufficiently overlaps </span></span><br><span class="line"><span class="comment">// with the other. If this was intentional, convert the expression to &#x27;unknown&#x27; first.</span></span><br></pre></td></tr></table></figure><p>有时这个规则可能过于保守，不允许更复杂的有效强制。如果出现这种情况，你可以使用两个断言，首先是针对 <code>any</code> (或者我们将在后面介绍的 <code>unknown</code> ) ，然后是所需的类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = (expr <span class="keyword">as</span> <span class="built_in">any</span>) <span class="keyword">as</span> T;</span><br></pre></td></tr></table></figure><h3 id="字面类型"><a href="#字面类型" class="headerlink" title="字面类型"></a>字面类型</h3><p>除了一般类型字符串和数字之外，我们还可以在类型位置中引用特定的字符串和数字。<br>JavaScript 是可以以不同的方式声明变量，<code>var</code> 和 <code>let</code> 都允许改变变量内部的值，而 <code>const</code> 不允许，这反映在 TypeScript 如何为文本创建类型上。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> changingString = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">changingString = <span class="string">&quot;Ola Mundo&quot;</span>;</span><br><span class="line"><span class="comment">// 因为`changingString`可以表示任何可能的字符串</span></span><br><span class="line"><span class="comment">// 所以TypeScript通过类型系统来描述它</span></span><br><span class="line">changingString;</span><br><span class="line"><span class="comment">// ^ = let changingString: string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> constantString = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="comment">// 因为 `constantString` 不能改变，所以TypeScript用字面类型来表示它</span></span><br><span class="line">constantString;</span><br><span class="line"><span class="comment">// ^ = const constantString: &quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><p>字面类型本身并不是很有价值:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="string">&quot;hello&quot;</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line">x = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">x = <span class="string">&quot;howdy&quot;</span>;</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Type &#x27;&quot;howdy&quot;&#x27; is not assignable to type &#x27;&quot;hello&quot;&#x27;.</span></span><br></pre></td></tr></table></figure><p>拥有一个只能有一个值的变量是没有多大用处的。<br>但是，通过将文字组合成联合类型，可以表达一个更有用的概念——例如，只接受一组已知值的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printText</span>(<span class="params">s: <span class="built_in">string</span>, alignment: <span class="string">&quot;left&quot;</span> | <span class="string">&quot;right&quot;</span> | <span class="string">&quot;center&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line">printText(<span class="string">&quot;Hello, world&quot;</span>, <span class="string">&quot;left&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">printText(<span class="string">&quot;G&#x27;day, mate&quot;</span>, <span class="string">&quot;centre&quot;</span>);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Argument of type &#x27;&quot;centre&quot;&#x27; is not assignable to parameter of type &#x27;&quot;left&quot; | &quot;right&quot; | &quot;center&quot;&#x27;.</span></span><br></pre></td></tr></table></figure><p>数值字面类型的工作原理是相同的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): -1 | 0 | 1 </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a === b ? <span class="number">0</span> : a &gt; b ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，你可以把它们和非字面类型结合起来:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Options &#123;</span><br><span class="line">  width: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configure</span>(<span class="params">x: Options | <span class="string">&quot;auto&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line">configure(&#123; <span class="attr">width</span>: <span class="number">100</span> &#125;);</span><br><span class="line">configure(<span class="string">&quot;auto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">configure(<span class="string">&quot;automatic&quot;</span>);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Argument of type &#x27;&quot;automatic&quot;&#x27; is not assignable to parameter of type &#x27;Options | &quot;auto&quot;&#x27;.</span></span><br><span class="line">T</span><br></pre></td></tr></table></figure><p>还有一种字面类型: <code>boolean</code> 字面类型。只有两种<code>boolean</code> 字面类型，正如你可能猜到的，它们是 <code>true</code> 和 <code>false</code> 类型。类型 <code>boolean</code> 本身实际上只是联合类型 <code>true | false</code> 的别名。</p><h4 id="字面推理"><a href="#字面推理" class="headerlink" title="字面推理"></a>字面推理</h4><p>当使用对象初始化变量时，TypeScript 假定该对象的属性稍后可能更改值。例如，如果你写了这样的代码:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (someCondition) &#123;</span><br><span class="line">  obj.counter = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript 不会假设将1赋值给先前值为0的字段是一个错误。另一种说法是 <code>obj.counter</code> 必须为 <code>number</code> 类型，而不是0，因为类型用于决定读取和写入行为。<br>这同样适用于字符串:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">handleRequest(req.url, req.method);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Argument of type &#x27;string&#x27; is not assignable to parameter of type &#x27;&quot;GET&quot; | &quot;POST&quot;&#x27;.</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>req.method</code> 被推断为 <code>string</code>，而不是 <code>&quot;GET&quot;</code>。因为代码可以在 <code>req</code> 的创建和 <code>handleRequest</code> 的调用之间进行推断，<code>handleRequest</code> 可以为 <code>req.method</code> 分配一个新字符串，比如 <code>&quot;GUESS&quot;</code>，所以 TypeScript 认为这段代码有错误。</p><p>有两种方法可以解决这个问题。</p><ol><li><p>你可以通过在任一位置添加类型断言来更改推断:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change 1:</span></span><br><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> <span class="keyword">as</span> <span class="string">&quot;GET&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change 2:</span></span><br><span class="line">handleRequest(req.url, req.method <span class="keyword">as</span> <span class="string">&quot;GET&quot;</span>);</span><br></pre></td></tr></table></figure><p>Change 1: 意味着你希望 <code>req.method</code> 一直是 <code>&quot;GET&quot;</code> 字面类型，以防止在后面可能将 <code>&quot;GUESS&quot;</code> 赋值给该字段。<br>Change 2: 意味着 “ 因为其他原因，我知道 <code>req.method</code> 的值为 <code>&quot;GET&quot;</code> ” ，就是直接设定 <code>req.method</code> 为字面类型 <code>&quot;GET&quot;</code></p></li><li><p>你可以使用 <code>as const</code> 将整个对象转换为字面类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">handleRequest(req.url, req.method);</span><br></pre></td></tr></table></figure><p><code>as const</code> 前缀的作用类似于 <code>const</code>，但是对于类型系统来说，确保所有属性都被分配为字面类型，而不是 <code>string</code> 或 <code>number</code> 之类的更一般的版本。</p></li></ol><h3 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a><code>null</code> 和 <code>undefined</code></h3><p>JavaScript 有两个用于表示缺失或未初始化值的基本值: <code>null</code> 和 <code>undefined</code> 。<br>TypeScript 有两个相同名字的对应类型。这些类型的行为取决于是否启用了 <code>stritnullchecks</code> 选项 （这个需要在 <code>tsconfig.json</code> 里进行配置）。</p><h4 id="strictNullChecks-关闭"><a href="#strictNullChecks-关闭" class="headerlink" title="strictNullChecks 关闭"></a><code>strictNullChecks</code> 关闭</h4><p>关闭 <code>strictnullcheck</code> 后，仍然可以正常访问可能为 <code>null</code> 或 <code>undefined</code> 的值，<code>null</code> 和 <code>undefined</code> 的值可以分配给任何类型的属性。这类似于没有空检查的语言(例如 c # 、 Java)的行为。缺乏对这些值的检查往往是 bug 的一个主要来源。 我们总是建议人们在他们的代码库中进行 <code>strictNullChecks</code> ，如果在他们的代码库中这样做是可行的。</p><h4 id="strictNullChecks-开启"><a href="#strictNullChecks-开启" class="headerlink" title="strictNullChecks 开启"></a><code>strictNullChecks</code> 开启</h4><p>使用 <code>strictNullChecks</code>，当一个值为 <code>null</code> 或 <code>undefined</code> 时，你需要在对该值使用方法或属性之前测试这些值。就像在使用可选属性之前检查 <code>undefined</code> 的值一样，我们可以使用收缩来检查可能为 <code>null</code> 的值:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">x: <span class="built_in">string</span> | <span class="literal">undefined</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// do nothing</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello, &quot;</span> + x.toUpperCase());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非空断言操作符（后缀-）"><a href="#非空断言操作符（后缀-）" class="headerlink" title="非空断言操作符（后缀 !）"></a>非空断言操作符（后缀 <code>!</code>）</h4><p>TypeScript 还有一种特殊的语法，用于在不进行任何显式检查的情况下从类型中删除 <code>null</code> 和 <code>undefined</code> 的内容。在任何表达式之后写后缀 <code>!</code>，它都是一个类型断言，表示该值不是 <code>null</code> 或 <code>undefined</code> 的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">liveDangerously</span>(<span class="params">x?: <span class="built_in">number</span> | <span class="literal">undefined</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// No error</span></span><br><span class="line">  <span class="built_in">console</span>.log(x!.toFixed());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像其他类型断言一样，这不会改变代码的运行时行为，因此当你知道该值不会为 <code>null</code> 或 <code>undefined</code>时，就可以使用 <code>!</code>。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举是由 TypeScript 添加到 JavaScript 的一个特性，它允许描述一个值，这个值可以是一组可能的命名常量之一。与大多数 TypeScript 特性不同，这不是 JavaScript 的类型级别增加，而是添加到语言和运行时中的。正因为如此，这是一个你应该知道存在的特性，但是除非你确定，否则可以推迟使用。你可以在 Enum 参考页面中阅读更多有关 Enum 的内容。</p><h3 id="不常用的原始类型"><a href="#不常用的原始类型" class="headerlink" title="不常用的原始类型"></a>不常用的原始类型</h3><p>值得一提的是 JavaScript 中的其余原始类型，虽然我们不会在这里深入探讨。</p><h4 id="bigint"><a href="#bigint" class="headerlink" title="bigint"></a><code>bigint</code></h4><p>从 ES2020开始，JavaScript 中有一个用于非常大的整数的原始类型 <code>BigInt</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过bigint函数创建一个bigint</span></span><br><span class="line"><span class="keyword">const</span> oneHundred: bigint = <span class="built_in">BigInt</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过字面量语法创建BigInt</span></span><br><span class="line"><span class="keyword">const</span> anotherHundred: bigint = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure><p>你可以在 TypeScript 3.2发行说明中了解更多关于 BigInt 的信息。</p><h4 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a><code>symbol</code></h4><p>JavaScript 中有一个原始类型，用于通过函数 <code>Symbol()</code>创建一个全局唯一引用:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> secondName = <span class="built_in">Symbol</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">if</span> (firstName === secondName) &#123;</span><br><span class="line">  <span class="comment">//ts报错信息</span></span><br><span class="line">  <span class="comment">//This condition will always return &#x27;false&#x27; since the types &#x27;typeof firstName&#x27; and &#x27;typeof secondName&#x27; have no overlap.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// firstName 和 secondName 不会相等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在 Symbols 参考页面了解更多关于它们的信息。</p><h2 id="缩小类型范围"><a href="#缩小类型范围" class="headerlink" title="缩小类型范围"></a>缩小类型范围</h2><p>缩小类型范围就是利用一些方法进行类型判断，从而缩小类型的范围。<br>假设我们有一个名为 padLeft 的函数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Not implemented yet!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>padding</code> 是一个 <code>number</code> ，那么它将把这个数字视为我们想要设置到 <code>input</code> 的空格数。如果 <code>padding</code> 是一个字符串，它应该只是想直接将 <code>padding</code> 加到 <code>input</code> 上 。让我们尝试实现当 padLeft 传递一个数字作为填充时的逻辑。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Error</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">&quot; &quot;</span>) + input;</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Operator &#x27;+&#x27; cannot be applied to types &#x27;string | number&#x27; and &#x27;number&#x27;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>啊哦，我们在 <code>padding + 1</code> 上得到一个错误。正在警告我们，向一个 <code>string | number</code> 类型的值加一个 <code>number</code> 可能不会给我们想要的结果，这个错误信息说的是对的。换句话说，我们没有明确地检查 <code>padding</code> 是否是一个 <code>number</code>，也没有处理它是一个 <code>string</code> 的情况，所以应该我们确定 <code>padding</code> 的类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里通过 typeof 判断 padding 的类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">&quot; &quot;</span>) + input;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> padding + input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这看起来像是一段乏味的 JavaScript 代码，那么这就是问题所在。除了我们放置的注释，这个 TypeScript 代码看起来像 JavaScript。TypeScript类型系统旨在让编写标准的 JavaScript 代码变得尽可能简单，而不用为了类型安全而竭尽全力。</p><p>虽然看起来不怎么样，但实际上这里有很多隐藏的东西。就像 TypeScript 如何使用静态类型分析运行时值一样，它将类型分析覆盖在 JavaScript 的运行时控制流结构上，比如 <code>if/else</code> 、条件句、循环、 真值检查等，这些都会影响类型判断。</p><p>在我们的 <code>if</code> 检查中，TypeScript 看到 <code>typeof padding === &quot;number&quot;</code>，并将其理解为一种称为类型保护的特殊形式的代码。TypeScript 遵循可能的执行路径，我们的程序可以采用这些路径来分析给定位置上某个值的最具体的可能类型。它查看这些特殊检查(被称为类型保护)和赋值，将类型细化为比声明的更具体的类型的过程称为缩小类型范围。在许多编辑器中，我们可以在这些类型更改时观测它们，我们甚至会在示例中这样做。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">&quot; &quot;</span>) + input;</span><br><span class="line">      <span class="comment">// ^ = (parameter) padding: number</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> padding + input;</span><br><span class="line">      <span class="comment">// ^ = (parameter) padding: string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有几种不同的 TypeScript 结构可以用于缩小类型范围。</p><h3 id="typeof-类型保护"><a href="#typeof-类型保护" class="headerlink" title="typeof 类型保护"></a><code>typeof</code> 类型保护</h3><p>利用 <code>typeof</code> 进行类型判断。<br>正如我们所看到的，JavaScript 支持一种 <code>typeof</code> 运算符，它可以给出运行时值类型的非常基本的信息。TypeScript 希望返回一组特定的字符串，如下:</p><ul><li> <code>&quot;string&quot;</code></li><li><code>&quot;number&quot;</code></li><li><code>&quot;bigint&quot;</code></li><li><code>&quot;boolean&quot;</code></li><li><code>&quot;symbol&quot;</code></li><li><code>&quot;undefined&quot;</code></li><li><code>&quot;object&quot;</code></li><li><code>&quot;function&quot;</code></li></ul><p>正如我们在 <code>padLeft</code> 中看到的，这个操作符经常出现在许多 JavaScript 库中，TypeScript 可以理解它来缩小不同分支中的类型范围。<br>在 TypeScript 中，根据 <code>typeof</code> 的返回值进行检查是一种类型保护。因为 TypeScript 编码 typeof 如何对不同的值进行操作，所以它知道 JavaScript 的一些怪异之处。例如，注意在上面的列表中，<code>typeof</code> 没有返回字符串 <code>null</code>。看看下面的例子:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// Error  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">      <span class="comment">// ts报错信息</span></span><br><span class="line">      <span class="comment">// Object is possibly &#x27;null&#x27;.</span></span><br><span class="line">      <span class="built_in">console</span>.log(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strs);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do nothing</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>printAll</code> 函数中，我们尝试检查 <code>strs</code> 是否是一个对象，以确定它是否是一个数组类型(现在可能是强调数组在 JavaScript 中是对象类型的好时机)。但事实证明，在 JavaScript 中，<code>typeof null</code> 实际上是 <code>&quot;object&quot;</code>！这是历史上不幸的事件之一。<br>有足够经验的程序员可能不会感到惊讶，但并不是每个人都在 JavaScript 中遇到过这种情况。 幸运的是，TypeScript 让我们知道 <code>strs</code> 只限于 <code>string[] | null</code>，而不仅仅是 <code>string[]</code>。</p><p>这可能是一个很好的切入点，我们称之为“真值”检查。</p><h3 id="真值性缩小类型范围"><a href="#真值性缩小类型范围" class="headerlink" title="真值性缩小类型范围"></a>真值性缩小类型范围</h3><p>利用真值性进行类型判断。<br>真值可能不是你可以在字典里找到的词，但是你可以在 JavaScript 中听到这个词。<br>在 JavaScript 中，我们可以在条件句、 <code>&amp;&amp;</code> 、 <code>||</code> 、 <code>if</code> 语句和布尔否定( <code>!</code> )中使用任何表达式。例如，<code>if</code> 语句不期望它们的条件总是 <code>boolean</code> 类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsersOnlineMessage</span>(<span class="params">numUsersOnline: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (numUsersOnline) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`There are <span class="subst">$&#123;numUsersOnline&#125;</span> online now!`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Nobody&#x27;s here. :(&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，<code>if</code> 会强制把它们的判断条件转换为 <code>boolean</code> 来进行判断，然后根据结果是 <code>true</code> 还是 <code>false</code> 来选择它们的分支。下面列出一下值：</p><ul><li><code>0</code></li><li><code>NaN</code></li><li><code>&quot;&quot;</code> (空字符串)</li><li><code>0n</code> ( <code>bigint</code> 版本的 0)</li><li><code>null</code></li><li><code>undefined</code></li></ul><p>上面这些值都被强制为 <code>false</code> ，其他的值都被强制为 <code>true</code> 。你也可以通过 <code>Boolean</code> 函数将一些值强制转换为 <code>boolean</code> 布尔值，或者使用较短的双布尔否定，如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 它们的结果都为 &#x27;true&#x27;</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">!!<span class="string">&quot;world&quot;</span>;</span><br></pre></td></tr></table></figure><p>利用这种行为是相当流行的，尤其是为了防范 <code>null</code> 或 <code>undefined</code> 的值。作为一个例子，让我们尝试在 <code>printAll</code> 函数中使用它，如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (strs &amp;&amp; <span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会注意到，我们已经通过检查 <code>strs</code> 是否真实而消除了之前的错误。这至少可以防止我们在运行代码时出现可怕的错误，比如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: null is not iterable</span><br></pre></td></tr></table></figure><p>请记住，对原始类型的真值性检查通常容易出错。作为一个例子，用不同的方式编写 <code>printAll</code> 函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// !!!!!!!!!!!!!!!!</span></span><br><span class="line">  <span class="comment">//  别这样写</span></span><br><span class="line">  <span class="comment">//  劝你耗子尾汁</span></span><br><span class="line">  <span class="comment">// !!!!!!!!!!!!!!!!</span></span><br><span class="line">  <span class="keyword">if</span> (strs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(s);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(strs);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子，我们将整个函数体包裹在一个 <code>if</code> 语句里，但这有一个微妙的缺点: 我们可能不再正确地处理 <code>strs</code> 为空字符串的情况。<br>TypeScript 在这里不会对我们抛出任何警告，但是如果你对 JavaScript 不是很熟悉的话，这种行为是值得注意的。通常可以帮助你在早期就发现 bug。如果你愿意，可以使用lint检查器，例如Eslint。</p><p>最后关于真值再说一句，可以使用 <code>!</code> 把假值过滤出来，例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiplyAll</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  values: <span class="built_in">number</span>[] | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  factor: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">number</span>[] | <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里使用 ! 把值为false的过滤出来</span></span><br><span class="line">  <span class="keyword">if</span> (!values) &#123;</span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> values.map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * factor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相等性缩小类型范围"><a href="#相等性缩小类型范围" class="headerlink" title="相等性缩小类型范围"></a>相等性缩小类型范围</h3><p>利用是否相等来进行类型判断。<br>TypeScript 还使用 <code>switch</code> 语句和相等性检查，比如 <code>===</code> 、 <code>!==</code> 、 <code>==</code> 和 <code>!=</code> 来缩小类型的范围，例如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span>, y: <span class="built_in">string</span> | <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">    <span class="comment">// 我们现在可以在 x 或 y 上调用任何&#x27;string&#x27;方法</span></span><br><span class="line">    x.toUpperCase();</span><br><span class="line">    <span class="comment">//     ^ = (method) String.toUpperCase(): string</span></span><br><span class="line">    y.toLowerCase();</span><br><span class="line">    <span class="comment">//     ^ = (method) String.toLowerCase(): string</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="comment">//     ^ = (parameter) x: string | number</span></span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">    <span class="comment">//     ^ = (parameter) y: string | boolean</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在上面的例子中检查 <code>x</code> 和 <code>y</code> 都相等时，TypeScript 知道它们的类型也必须相等。因为 <code>string</code> 是 <code>x</code> 和 <code>y</code> 都可接受的唯一共有类型，所以 TypeScript 知道 <code>x</code> 和 <code>y</code> 在第一个分支中必定为 <code>string</code> 类型。</p><p>检查特定的字面值(相对于变量)也可以起作用。在我们关于真值性缩小类型范围的部分中，我们编写了一个 <code>printAll</code> 函数，这个函数很容易出错，因为它没有正确处理空字符串。相反，我们可以做一个特定的检查来阻止 <code>null</code>，而 TypeScript 仍然可以正确地从 <code>strs</code> 类型中移除 <code>null</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里直接判断不为 null</span></span><br><span class="line">  <span class="keyword">if</span> (strs !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">      <span class="comment">// ^ = (parameter) strs: string[]</span></span><br><span class="line">        <span class="built_in">console</span>.log(s);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(strs);</span><br><span class="line">      <span class="comment">// ^ = (parameter) strs: string</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript 宽松的相等性检查对象 <code>==</code> 和 <code>!=</code> 也正确地缩小范围。如果你不熟悉，检查某个值是否 <code>== null</code> 实际上不仅检查它是否特定为 <code>null</code> 值，同时它还检查它是否可能为 <code>undefined</code>。这同样适用于 <code>== undefined</code>: 它检查一个值是 <code>null</code> 还是 <code>undefined</code>，因为 <code>null == undefined</code> 值为 <code>true</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Container &#123;</span><br><span class="line">  value: <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiplyValue</span>(<span class="params">container: Container, factor: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里用 != 符号判断不等于null，同时也排除了undefined</span></span><br><span class="line">  <span class="keyword">if</span> (container.value != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(container.value);</span><br><span class="line">    <span class="comment">//  ^ = (property) Container.value: number</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now we can safely multiply &#x27;container.value&#x27;.</span></span><br><span class="line">    container.value *= factor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="instanceof-缩小类型范围"><a href="#instanceof-缩小类型范围" class="headerlink" title="instanceof 缩小类型范围"></a><code>instanceof</code> 缩小类型范围</h3><p>利用 <code>instanceof</code> 来进行类型的判断。<br>JavaScript 有一个运算符用于检查一个值是否是另一个值的 “实例”。更具体地说，在 JavaScript 中 ，<code>x instanceof Foo</code> 表示检查 <code>x</code> 的原型链是否包含 <code>Foo.prototype</code>。虽然我们在这里不会深入讨论，当我们进入类的时候你会了解更多，但是对于大多数可以用 <code>new</code> 构造的值来说，它们仍然是有用的。正如你可能已经猜到的，<code>instanceof</code> 也是一个类型保护，并且TypeScript 缩小由 <code>instanceof</code> 作用的分支的类型范围。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logValue</span>(<span class="params">x: <span class="built_in">Date</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x.toUTCString());</span><br><span class="line">    <span class="comment">// ^ = (parameter) x: Date</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x.toUpperCase());</span><br><span class="line">    <span class="comment">// ^ = (parameter) x: string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>正如我们前面提到的，当我们给任何变量赋值时，TypeScript 会查看赋值的右侧，并适当地缩小左侧类型范围。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span> ? <span class="number">10</span> : <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"><span class="comment">//  ^ = let x: string | number</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// ^ = let x: number</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;goodbye!&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// ^ = let x: string</span></span><br></pre></td></tr></table></figure><p>请注意，这些赋值都是有效的。尽管在第一次赋值后观察到的 <code>x</code> 类型改变为 <code>number</code>，但我们仍然能够将字符串赋值给 <code>x</code>。这是因为 <code>x</code> 最开始声明的类型为 <code>number | string</code> 联合类型，并且始终根据声明的类型检查可赋值性。<br>如果我们将一个 <code>boolean</code> 赋给 <code>x</code>，我们会看到一个错误，因为它不是声明类型的一部分。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span> ? <span class="number">10</span> : <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"><span class="comment">//  ^ = let x: string | number</span></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// ^ = let x: number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">x = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Type &#x27;boolean&#x27; is not assignable to type &#x27;string | number&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// ^ = let x: string | number</span></span><br></pre></td></tr></table></figure><h3 id="控制流分析"><a href="#控制流分析" class="headerlink" title="控制流分析"></a>控制流分析</h3><p>到目前为止，我们已经通过了一些基本的例子来说明 TypeScript 在特定的分支中是如何缩小类型范围的。但是，除了从每个变量中寻找类型保护(<code>if</code>、 <code>while</code>、条件 等等)之外，还有更多的工作要做。例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">&quot; &quot;</span>) + input;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> padding + input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>padLeft</code> 从它的第一个 <code>if</code> 块返回。TypeScript 能够分析这段代码，并发现在 <code>padding</code> 是一个 <code>number</code> 的情况下，主体的其余部分( <code>return padding + input;</code> )是不可达的。因此，它能够从函数其余部分的 <code>padding</code> 的类型(从 <code>number | string</code> 缩小到 <code>string</code> )中删除 <code>number</code>。<br>这种基于可达性的代码分析称为控制流分析，当遇到类型保护和赋值时，TypeScript 使用这种流分析来缩小类型范围。当分析一个变量时，控制流可以一次又一次地分离和重新合并，并且可以观察到该变量在每个点具有不同的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  x = <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="comment">// ^ = let x: boolean</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    x = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="comment">// ^ = let x: string</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="comment">// ^ = let x: number</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">  <span class="comment">// ^ = let x: string | number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用类型谓词"><a href="#使用类型谓词" class="headerlink" title="使用类型谓词"></a>使用类型谓词</h3><p>到目前为止，我们已经使用现有的 JavaScript 构造来处理缩小类型范围，但是有时候你希望更直接地控制整个代码中类型的变化。<br>要定义一个用户定义的类型保护，我们只需要定义一个返回类型为类型谓词的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFish</span>(<span class="params">pet: Fish | Bird</span>): <span class="title">pet</span> <span class="title">is</span> <span class="title">Fish</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (pet <span class="keyword">as</span> Fish).swim !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pet is Fish</code> 是本例中的类型谓词。谓词采用 <code>parameterName is Type</code> 这种形式定义，其中 <code>parameterName</code> 必须是来自当前函数签名的参数的名称。<br>任何时候都可以通过某个变量调用 <code>isFish</code>，如果原始类型兼容，则 TypeScript 会将该变量类型缩小到特定类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在对 swim 和 fly 的调用都可以了</span></span><br><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isFish(pet)) &#123;</span><br><span class="line">  pet.swim();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  pet.fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，TypeScript 不仅知道 <code>pet</code> 在 <code>if</code> 分支中是 <code>Fish</code> 类型，它还知道在 <code>else</code> 分支中没有 <code>Fish</code> ，所以你必须有 <code>Bird</code>。<br>你可以使用类型保护 <code>isFish</code> 来过滤一组 <code>Fish | Bird</code> 并获得一组 <code>Fish</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zoo: (Fish | Bird)[] = [getSmallPet(), getSmallPet(), getSmallPet()];</span><br><span class="line"><span class="keyword">const</span> underWater1: Fish[] = zoo.filter(isFish);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">const</span> underWater2: Fish[] = zoo.filter(isFish) <span class="keyword">as</span> Fish[];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于更复杂的例子，可能需要重复谓词</span></span><br><span class="line"><span class="keyword">const</span> underWater3: Fish[] = zoo.filter((pet): pet is Fish =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (pet.name === <span class="string">&quot;sharkey&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> isFish(pet);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此外，类可以使用 <code>this is Type</code> 来缩小它们的类型 (详情请看类的那部分)。</p><h3 id="可区分联合类型"><a href="#可区分联合类型" class="headerlink" title="可区分联合类型"></a>可区分联合类型</h3><p>到目前为止，我们看到的大多数示例都集中在使用简单类型(如 <code>string</code>、<code>boolean</code> 和 <code>number</code>)来缩小单个变量的类型范围。虽然这种情况很常见，但在 JavaScript 中，大多数时候我们将处理稍微复杂一些的结构。</p><p>出于某种动机，让我们想象一下我们正在尝试编码像圆圈和方块这样的形状。圆形记录它们的半径，方形记录它们的边长。我们将使用一个叫 <code>kind</code> 的字段来判断我们处理的是哪种形状。这是第一次尝试定义 <code>Shape</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  kind: <span class="string">&quot;circle&quot;</span> | <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  radius?: <span class="built_in">number</span>;</span><br><span class="line">  sideLength?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，我们使用字符串字面类型的联合类型:  <code>&quot;circle&quot;</code> 和 <code>&quot;square&quot;</code> 来告诉我们应该分别将形状视为圆还是正方形。通过使用<code>&quot;circle&quot; | &quot;square&quot;</code> 代替 <code>string</code>，我们可以避免拼写错误。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleShape</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Error</span></span><br><span class="line">  <span class="keyword">if</span> (shape.kind === <span class="string">&quot;rect&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// This condition will always return &#x27;false&#x27; since the types &#x27;&quot;circle&quot; | &quot;square&quot;&#x27; and &#x27;&quot;rect&quot;&#x27; have no overlap.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以写一个 <code>getArea</code> 函数根据它处理的是圆还是方应用正确的逻辑。我们首先来处理圆。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Error</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Object is possibly &#x27;undefined&#x27;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>strictNullChecks</code> 模式下，报了一个错误，这是合理的，因为 <code>radius</code> 可能没有定义。但是，如果我们对 <code>kind</code> 属性执行适当的检查会怎样呢？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (shape.kind === <span class="string">&quot;circle&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// Error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// ts报错信息</span></span><br><span class="line">    <span class="comment">// Object is possibly &#x27;undefined&#x27;.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScipt 还是不知道该怎么做。我们遇到了这样一个问题: 我们比类型检查器更了解我们的值。我们可以尝试使用非空断言( 在 <code>shape.radius</code> 之后使用一个 <code>!</code> 符号)来说明 <code>radius</code> 确实存在。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (shape.kind === <span class="string">&quot;circle&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius! ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这并不完美。我们必须使用非空断言(<code>!</code>)来对类型检查器说明 <code>shape.radius</code> 是定义好的，但是如果我们移动代码，这些断言就很容易出错。此外，不在 <code>strictNullChecks</code> 模式下时，我们还可以偶尔访问这些可选字段中的任何一个(因为可选属性只是假定在读取它们时始终存在)。我们肯定可以做得更好些。</p><p>上面那种 <code>Shape</code> 编码的问题在于，类型检查器无法根据种类属性知道是否存在 <code>radius</code> 或者 <code>sideLength</code>。我们需要把我们所知道的告诉类型检查器。考虑到这一点，让我们再次定义 <code>Shape</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">  kind: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">  radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  kind: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = Circle | Square;</span><br></pre></td></tr></table></figure><p>这里，我们正确地将 <code>Shape</code> 分成两种类型，它们对于 <code>kind</code> 属性有不同的值，但是 <code>radius</code> 和 <code>sideLength</code> 在它们各自的类型中被声明为必需的属性。<br>让我们看看当我们尝试访问一个 <code>Shape</code> 的 <code>radius</code> 时会发生什么。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Error</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Property &#x27;radius&#x27; does not exist on type &#x27;Shape&#x27;.</span></span><br><span class="line">  <span class="comment">// Property &#x27;radius&#x27; does not exist on type &#x27;Square&#x27;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像我们第一次定义 <code>Shape</code> 一样，这仍然有错误。当 <code>radius</code> 是可选的时候，我们得到了一个错误(仅在 <code>strictnullcheck</code> 模式下) ，因为 TypeScript 无法判断属性是否存在。现在 <code>Shape</code> 是一个联合类型，TypeScipt 告诉我们<code>shape</code> 可能是一个 <code>Square</code> ，而 <code>Square</code> 上没有定义 <code>radius</code> ！这两种解释都是正确的，但是只有我们对 <code>Shape</code> 的新编码会在 <code>strictNullChecks</code> 模式之外引起错误。<br>但是如果我们再次检查 <code>kind</code> 属性呢？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (shape.kind === <span class="string">&quot;circle&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//  ^ = (parameter) shape: Circle</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就消除了错误！当联合类型中的每个类型都包含具有字面类型的公共属性时，TypeScript 将其视为一个可区分联合类型，并可以缩小联合类型的成员范围。<br>在这种情况下，<code>kind</code> 指的是公共属性(这被认为是 <code>Shape</code> 的判别属性)。检查 <code>kind</code> 属性是否为 <code>&quot;circle&quot;</code>，过滤掉了 <code>Shape</code> 联合类型中没有 <code>kind</code> 属性的所有类型。将 <code>Shape</code> 缩小到 <code>Circle</code> 类型。<br>同样的检查也适用于 <code>switch</code> 语句。现在，我们可以尝试编写我们的完整的 <code>getArea</code> 函数，并且没有任何讨厌的 <code>！</code> 非空断言。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (shape.kind) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">      <span class="comment">//  ^ = (parameter) shape: Circle</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> shape.sideLength ** <span class="number">2</span>;</span><br><span class="line">      <span class="comment">//  ^ = (parameter) shape: Square</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里重要的是 <code>Shape</code> 的编码。将正确的信息传达给 TypeScript (<code>Circle</code> 和 <code>Square</code> 实际上是两种带有特定类型字段的独立类型 )至关重要。这样做可以让我们编写类型安全的 TypeScript 代码，它看起来与我们本来要编写的 JavaScript 没有什么不同。就像上面的代码一样，类型系统就能够做”正确”的事情，并在 <code>switch</code> 语句的每个分支中指出类型。</p><blockquote><p>顺便说一句，尝试使用上面的例子并删除一些 <code>return</code> 关键字。你将看到，类型检查可以帮助避免在switch语句中不小心漏掉了不同的子句时出现 bug。</p></blockquote><p>可区分的联合类型不仅仅是用来讨论圆形和方形的。它们非常适合用 JavaScript 表示任何类型的消息传递模式，比如通过网络发送消息(客户机/服务器通信) ，或者在状态管理框架中编写转变 <code>mutations</code>。</p><h3 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a><code>never</code> 类型</h3><p>当缩小类型范围时，你可以将联合类型的选项减少到删除了所有可能性并且没有剩余的选项。在这些情况下，TypeScript 将使用一个 <code>never</code> 类型来表示一个不应该存在的状态 (具体示例看下面的穷尽性检查)。</p><h3 id="穷尽性检查"><a href="#穷尽性检查" class="headerlink" title="穷尽性检查"></a>穷尽性检查</h3><p><code>never</code> 类型可以分配给每个类型。然而，没有任何类型可以分配给 <code>never</code> (除了它本身)。这意味着您可以使用收缩，并依赖于在 switch 语句中从不进行详尽的检查。<br>例如，在 <code>getArea</code> 函数中添加一个 <code>default</code>，该函数尝试将 <code>shape</code> 分配为 <code>never</code>，当所有可能的情况都没有处理时将会引发。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Shape = Circle | Square;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (shape.kind) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">      <span class="comment">//  ^ = (parameter) shape: Circle</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> shape.sideLength ** <span class="number">2</span>;</span><br><span class="line">      <span class="comment">//  ^ = (parameter) shape: Square</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">const</span> _exhaustiveCheck: <span class="built_in">never</span> = shape;</span><br><span class="line">      <span class="comment">//  ^ = (parameter) shape: never</span></span><br><span class="line">      <span class="keyword">return</span> _exhaustiveCheck;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向 <code>Shape</code> 联合类型添加一个新成员，将导致 TypeScirpt 错误:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Triangle &#123;</span><br><span class="line">  kind: <span class="string">&quot;triangle&quot;</span>;</span><br><span class="line">  sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = Circle | Square | Triangle;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (shape.kind) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">      <span class="comment">//  ^ = (parameter) shape: Circle</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> shape.sideLength ** <span class="number">2</span>;</span><br><span class="line">      <span class="comment">//  ^ = (parameter) shape: Square</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">// Error</span></span><br><span class="line">      <span class="keyword">const</span> _exhaustiveCheck: <span class="built_in">never</span> = shape;</span><br><span class="line">      <span class="comment">//  ^ = (parameter) shape: Triangle</span></span><br><span class="line">      <span class="comment">// ts报错信息</span></span><br><span class="line">      <span class="comment">// Type &#x27;Triangle&#x27; is not assignable to type &#x27;never&#x27;.</span></span><br><span class="line">      <span class="keyword">return</span> _exhaustiveCheck;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候 <code>default</code> 分支里 <code>shape</code> 的类型就变成了 <code>Triangle</code> ，所以就不能再赋值给 <code>_exhaustiveCheck</code> 这个 <code>never</code> 类型的常量，就会报错。</p><h2 id="更多关于函数的资料"><a href="#更多关于函数的资料" class="headerlink" title="更多关于函数的资料"></a>更多关于函数的资料</h2><p>函数是任何应用程序的基本构建块，无论它们是从另一个模块导入的本地函数，还是类上的方法。它们也是值，就像其他值一样，TypeScript 有许多方法来描述函数的调用方式。让我们学习如何编写描述函数的类型。</p><h3 id="函数类型表达式"><a href="#函数类型表达式" class="headerlink" title="函数类型表达式"></a>函数类型表达式</h3><p>描述函数最简单的方法是使用函数类型表达式。这些类型在语法上类似于箭头函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">fn: (a: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  fn(<span class="string">&quot;Hello, World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printToConsole</span>(<span class="params">s: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greeter(printToConsole);</span><br></pre></td></tr></table></figure><p>语法 <code>(a: string) = &gt; void</code> 表示 “一个参数名为 <code>a</code>并且参数类型为 <code>string</code> 的函数，该函数返回值为 <code>void</code>”。就像函数声明一样，如果没有指定参数类型，它就是隐式的。</p><blockquote><p>请注意，参数名是必需的。函数类型 <code>(string) = &gt; void</code> 表示“一个参数名为 <code>string</code>并且参数类型为 <code>any</code> 的函数，该函数返回值为 <code>void</code>”。</p></blockquote><p>当然，我们可以使用类型别名来命名函数类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GreetFunction = <span class="function">(<span class="params">a: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">fn: GreetFunction</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用签名"><a href="#调用签名" class="headerlink" title="调用签名"></a>调用签名</h3><p>在 JavaScript 中，函数除了可调用之外，还可以具有属性。但是，函数类型表达式语法不允许声明属性。如果我们想用属性来描述可调用的东西，我们可以用对象类型来写一个调用签名:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DescribableFunction = &#123;</span><br><span class="line">  description: <span class="built_in">string</span>;</span><br><span class="line">  (someArg: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">fn: DescribableFunction</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fn.description + <span class="string">&quot; 返回结果： &quot;</span> + fn(<span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judge</span>(<span class="params">n: <span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n &gt; <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">judge.description = <span class="string">&#x27;是否大于1&#x27;</span></span><br><span class="line"></span><br><span class="line">doSomething(judge)</span><br></pre></td></tr></table></figure><p>如果 <code>judge</code> 函数没有添加 <code>description</code> 属性，就会报错。<br>注意，语法与函数类型表达式稍有不同。在参数列表和返回类型之间的语法稍有不同，使用 <code>:</code> 而不是 <code>=&gt;</code>。</p><h3 id="构造签名"><a href="#构造签名" class="headerlink" title="构造签名"></a>构造签名</h3><p>JavaScript函数也可以用 <code>new</code> 操作符来调用，TypeScript将这些函数称为构造函数，因为它们通常创建一个新的对象。你可以通过在调用签名前添加 new 关键字来写一个构造签名:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SomeConstructor = &#123;</span><br><span class="line">  <span class="keyword">new</span> (s: <span class="built_in">string</span>): SomeObject;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">ctor: SomeConstructor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ctor(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些对象，比如 JavaScript 的 <code>Date</code> 对象，可以使用或不使用 <code>new</code> 来调用。你可以在同一类型中任意组合调用和构造签名:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> CallOrConstruct &#123;</span><br><span class="line">  <span class="keyword">new</span> (s: <span class="built_in">string</span>): <span class="built_in">Date</span>;</span><br><span class="line">  (n?: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><p>通常编写一个函数，其中输入的类型与输出的类型相关，或者两个输入的类型以某种方式相关。让我们暂时考虑一个返回数组第一个元素的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstElement</span>(<span class="params">arr: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数完成它的工作，但可惜的是返回类型为 <code>any</code>。如果函数返回数组元素的类型会更好。<br>在 TypeScript 中，当我们想要描述两个值之间的对应关系时，可以使用泛型。我们通过在函数签名中声明一个类型参数来实现:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里 &lt;Type&gt;指定类型参数Type</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstElement</span>&lt;<span class="title">Type</span>&gt;(<span class="params">arr: Type[]</span>): <span class="title">Type</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过向这个函数添加类型参数 <code>Type</code> 并在两个地方使用它，我们在函数的输入(数组)和输出(返回值)之间创建了一个链接。现在，当我们称之为，一个更具体的类型出现了:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s is of type &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">const</span> s = firstElement([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]);</span><br><span class="line"><span class="comment">// n is of type &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">const</span> n = firstElement([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><h3 id="推断"><a href="#推断" class="headerlink" title="推断"></a>推断</h3><p>注意，我们不必在这个示例中指定 <code>Type</code>。类型是由 TypeScript 自动推断出来的。<br>我们也可以使用多个类型参数，例如，一个独立版本的 <code>map</code> 看起来像这样:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>&lt;<span class="title">Input</span>, <span class="title">Output</span>&gt;(<span class="params">arr: Input[], func: (arg: Input) =&gt; Output</span>): <span class="title">Output</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.map(func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parameter &#x27;n&#x27; is of type &#x27;string&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;parsed&#x27; is of type &#x27;number[]&#x27;</span></span><br><span class="line"><span class="keyword">const</span> parsed = map([<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>], <span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">parseInt</span>(n));</span><br></pre></td></tr></table></figure><p>注意，在这个示例中，TypeScript 可以推断出 <code>Input</code> 的类型参数 (根据输入的 <code>string</code> 数组)，也可以根据函数表达式的返回值，推断出 <code>Output</code> 的类型参数( <code>number</code> )。</p><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>我们已经编写了一些泛型函数，它们可以处理任何类型的值。有时候，我们希望关联两个值，但是只能对值的某个子集进行操作。在这种情况下，我们可以使用约束来限制类型参数可以接受的类型种类。<br>让我们编写一个函数，返回两个值中较长的一个。要做到这一点，我们需要一个长度属性，它是一个数字。我们通过写一个 <code>extends</code> 子句将类型参数约束为该类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longest</span>&lt;<span class="title">Type</span> <span class="title">extends</span> </span>&#123; length: <span class="built_in">number</span> &#125;&gt;(a: Type, <span class="attr">b</span>: Type) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.length &gt;= b.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// longerArray 是 &#x27;number[]&#x27; 类型</span></span><br><span class="line"><span class="keyword">const</span> longerArray = longest([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// longerString 是 &#x27;string&#x27; 类型</span></span><br><span class="line"><span class="keyword">const</span> longerString = longest(<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error! 数字没有 &#x27;length&#x27; 属性</span></span><br><span class="line"><span class="keyword">const</span> notOK = longest(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Argument of type &#x27;number&#x27; is not assignable to parameter of type &#x27;&#123; length: number; &#125;&#x27;.</span></span><br></pre></td></tr></table></figure><p>在这个例子中几乎没有什么有趣的东西值得注意。我们允许TypeScript推断出 <code>longest</code> 的返回类型。返回类型推断也适用于泛型函数。<br>因为我们将 <code>Type</code> 限制为 <code>&#123; length: number &#125;</code> ，所以我们被允许访问 <code>a</code> 和 <code>b</code> 参数的 <code>.length</code> 属性。如果没有类型约束，我们将无法访问这些属性，因为这些值可能是没有长度属性的其他类型。<br>根据参数推断出 <code>longerArray</code> 和 <code>longerString</code> 的类型。记住，泛型都是关于用同一类型关联两个或多个值的！<br>最后，正如我们所希望的，对 <code>longest (10,100)</code> 的调用被拒绝，因为 <code>number</code> 类型没有 <code>.length</code> 属性。</p><h3 id="使用约束值"><a href="#使用约束值" class="headerlink" title="使用约束值"></a>使用约束值</h3><p>下面是处理一般约束时的一个常见错误:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minimumLength</span>&lt;<span class="title">Type</span> <span class="title">extends</span> </span>&#123; length: <span class="built_in">number</span> &#125;&gt;(</span><br><span class="line">  obj: Type,</span><br><span class="line">  minimum: <span class="built_in">number</span></span><br><span class="line">): Type &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.length &gt;= minimum) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Error</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">length</span>: minimum &#125;;</span><br><span class="line">    <span class="comment">// ts报错信息</span></span><br><span class="line">    <span class="comment">// Type &#x27;&#123; length: number; &#125;&#x27; is not assignable to type &#x27;Type&#x27;.</span></span><br><span class="line">    <span class="comment">// &#x27;&#123; length: number; &#125;&#x27; is assignable to the constraint of type &#x27;Type&#x27;, but &#x27;Type&#x27; could be instantiated with a different subtype of constraint &#x27;&#123; length: number; &#125;&#x27;.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数看起来像是可以的 ( <code>Type</code> 被限制为  <code>&#123; length: number &#125;</code>)，并且函数返回 <code>Type</code> 或匹配该限制的值。问题在于，该函数承诺返回与传入的对象类型相同的对象，而不仅仅是匹配约束的对象。如果这些代码是合法的，你可以编写一些肯定不能工作的代码:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#x27;arr&#x27; 获取值 &#123; length: 6 &#125;</span></span><br><span class="line"><span class="keyword">const</span> arr = minimumLength([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">6</span>);</span><br><span class="line"><span class="comment">// 并且这里是一定会错误的</span></span><br><span class="line"><span class="comment">// 因为 arr 对象没有 slice 方法，它只是简单的对象而不数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h3 id="指定类型参数"><a href="#指定类型参数" class="headerlink" title="指定类型参数"></a>指定类型参数</h3><p>通常可以在泛型调用中推断预期的类型参数，但并不总是如此。例如，假设你写了一个函数来组合两个数组:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>&lt;<span class="title">Type</span>&gt;(<span class="params">arr1: Type[], arr2: Type[]</span>): <span class="title">Type</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr1.concat(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常用不匹配的数组调用这个函数是错误的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> arr = combine([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&quot;hello&quot;</span>]);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure><p>但是，如果你打算这么做，你可以手动指定 <code>Type</code> 类型参数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = combine&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&quot;hello&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="编写优秀泛型函数指南"><a href="#编写优秀泛型函数指南" class="headerlink" title="编写优秀泛型函数指南"></a>编写优秀泛型函数指南</h3><p>编写泛型函数很有趣，而且很容易被类型参数冲昏头脑。拥有太多的类型参数，或者在不需要它们的地方使用约束，可能会导致推理不太成功，使函数调用者感到沮丧。</p><h4 id="优先使用类型参数"><a href="#优先使用类型参数" class="headerlink" title="优先使用类型参数"></a>优先使用类型参数</h4><p>下面是两种看似相似的函数写法:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstElement1</span>&lt;<span class="title">Type</span>&gt;(<span class="params">arr: Type[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstElement2</span>&lt;<span class="title">Type</span> <span class="title">extends</span> <span class="title">any</span>[]&gt;(<span class="params">arr: Type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a: number (good)</span></span><br><span class="line"><span class="keyword">const</span> a = firstElement1([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b: any (bad)</span></span><br><span class="line"><span class="keyword">const</span> b = firstElement2([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>乍一看，这两个函数似乎完全相同，但 <code>firstElement1</code> 是编写这个函数的更好方法，它的推断返回类型是 <code>Type</code> 。但 <code>firstElement2</code> 的推断返回类型是 <code>any</code> ，因为 TypeScript 必须使用约束类型解析 <code>arr [0]</code> 表达式 (也就是 <code>arr</code> 的元素类型解析为了 <code>any</code>)，而不是在调用期间“等待”解析元素。</p><blockquote><p>规则: 如果可以的话，使用类型参数本身而不是约束它</p></blockquote><h4 id="使用更少的类型参数"><a href="#使用更少的类型参数" class="headerlink" title="使用更少的类型参数"></a>使用更少的类型参数</h4><p>下面是另外一对相似的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种写法更好</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter1</span>&lt;<span class="title">Type</span>&gt;(<span class="params">arr: Type[], func: (arg: Type) =&gt; <span class="built_in">boolean</span></span>): <span class="title">Type</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter2</span>&lt;<span class="title">Type</span>, <span class="title">Func</span> <span class="title">extends</span> (<span class="params">arg: Type</span>) =&gt; <span class="title">boolean</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  arr: Type[],</span></span></span><br><span class="line"><span class="function"><span class="params">  func: Func</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Type</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(func);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建了一个类型参数 <code>Func</code>，它不关联两个值。这总是一个危险信号，因为这意味着调用者想要指定类型参数，就必须手动指定一个额外的类型参数。<code>Func</code> 什么都不做，只是让函数更难阅读和推理。</p><blockquote><p>规则: 总是使用尽可能少的类型参数</p></blockquote><h4 id="类型参数至少出现两次"><a href="#类型参数至少出现两次" class="headerlink" title="类型参数至少出现两次"></a>类型参数至少出现两次</h4><p>有时候我们会忘记函数可能不需要泛型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>&lt;<span class="title">Str</span> <span class="title">extends</span> <span class="title">string</span>&gt;(<span class="params">s: Str</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello, &quot;</span> + s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们也可以很容易地写出一个更简单的版本:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">s: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello, &quot;</span> + s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记住，类型参数是用来关联多个值的类型的。如果一个类型参数在函数签名中只用了一次，那么它就没有任何关系，就不需要泛型了。</p><blockquote><p>规则: 如果一个类型参数只出现在一个位置，请强烈重新考虑是否实际需要它</p></blockquote><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>函数通常带有可变数量的参数。例如，<code>number</code> 的 <code>toFixed</code> 方法接受一个可选的数字计数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n.toFixed()); <span class="comment">// 0 arguments</span></span><br><span class="line">  <span class="built_in">console</span>.log(n.toFixed(<span class="number">3</span>)); <span class="comment">// 1 argument</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在 TypeScript 中通过将参数标记为可选的 <code>?</code> :</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">f(); <span class="comment">// OK</span></span><br><span class="line">f(<span class="number">10</span>); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>尽管该参数被指定为 <code>number</code> 类型，但是 <code>x</code> 参数实际上具有 <code>number | undefined</code> 类型，因为 JavaScript 中未指定的参数的值为 <code>undefined</code>。<br>你也可以提供一个参数默认值:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在在 <code>f</code> 的主体中，<code>x</code> 的类型为 <code>number</code>，因为任何 <code>undefined</code> 的参数都将被替换为 <code>10</code>。请注意，当一个参数是可选的时候，调用方总是可以传递未定义的参数，因为这只是模拟了一个“缺少的”参数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x?: <span class="built_in">number</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="comment">// cut</span></span><br><span class="line"><span class="comment">// All OK</span></span><br><span class="line">f();</span><br><span class="line">f(<span class="number">10</span>);</span><br><span class="line">f(<span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure><h3 id="回调函数中的可选参数"><a href="#回调函数中的可选参数" class="headerlink" title="回调函数中的可选参数"></a>回调函数中的可选参数</h3><p>一旦你了解了可选参数和函数类型表达式，在编写调用回调函数时很容易出现以下错误:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myForEach</span>(<span class="params">arr: <span class="built_in">any</span>[], callback: (arg: <span class="built_in">any</span>, index?: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    callback(arr[i], i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>人们在编写 <code>index</code> 时通常打算做什么？作为一个可选参数，他们希望这两种调用都是合法的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myForEach([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="built_in">console</span>.log(a));</span><br><span class="line">myForEach([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">a, i</span>) =&gt;</span> <span class="built_in">console</span>.log(a, i));</span><br></pre></td></tr></table></figure><p>这实际上意味着回调函数可以用一个参数调用。换句话说，函数定义中说的实现可能是这样的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myForEach</span>(<span class="params">arr: <span class="built_in">any</span>[], callback: (arg: <span class="built_in">any</span>, index?: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 这里只使用了一个参数</span></span><br><span class="line">    callback(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反过来，TypeScript 会强化这种意图，并发出不太可能出现的错误:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">myForEach([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">a, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Error</span></span><br><span class="line">  <span class="built_in">console</span>.log(i.toFixed());</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Object is possibly &#x27;undefined&#x27;.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在JavaScript中，如果你调用一个有更多参数的函数，额外的参数会被忽略。TypeScript的行为也是如此。具有较少参数（相同类型）的函数总是可以取代具有较多参数的函数。</p><blockquote><p>在为回调编写函数类型时，永远不要编写可选参数，除非你打算在不传递该参数的情况下调用该函数</p></blockquote><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>一些 JavaScript 函数可以通过各种参数计数和类型来调用。例如，您可以编写一个函数来生成一个接受时间戳(一个参数)或月/日/年规范(三个参数)的 <code>Date</code>。<br>在 TypeScript 中，我们可以通过写重载签名来指定一个可以以不同方式调用的函数。要做到这一点，写一些函数签名(通常是两个或更多) ，后面跟着函数体:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDate</span>(<span class="params">timestamp: <span class="built_in">number</span></span>): <span class="title">Date</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDate</span>(<span class="params">m: <span class="built_in">number</span>, d: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">Date</span></span>; <span class="comment">// 上面两个为重载签名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDate</span>(<span class="params">mOrTimestamp: <span class="built_in">number</span>, d?: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123; <span class="comment">// 这里为实现签名</span></span><br><span class="line">  <span class="keyword">if</span> (d !== <span class="literal">undefined</span> &amp;&amp; y !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(y, mOrTimestamp, d);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(mOrTimestamp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d1 = makeDate(<span class="number">12345678</span>);</span><br><span class="line"><span class="keyword">const</span> d2 = makeDate(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> d3 = makeDate(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，我们写了两个重载: 一个接受一个参数，另一个接受三个参数。前两个签名称为重载签名。<br>然后，我们编写了一个具有兼容签名的函数实现。函数有一个实现签名，但是这个签名不能直接调用。即使我们在必需的参数之后写了一个带有两个可选参数的函数，它也不能用两个参数来调用，只能以前面两种重载的形式调用函数。</p><h3 id="重载签名和实现签名"><a href="#重载签名和实现签名" class="headerlink" title="重载签名和实现签名"></a>重载签名和实现签名</h3><p>这是一个常见的困惑来源。通常人们写这样的代码并不理解为什么会有错误:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Error 期望能够以零个参数调用函数</span></span><br><span class="line">fn();</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// Expected 1 arguments, but got 0.</span></span><br></pre></td></tr></table></figure><p>同样，用于写函数体的签名不能从外部“看到”。</p><blockquote><p>从外部看不到实现的签名。在编写重载函数时，应该始终在函数的实现上方有两个或多个重载签名。</p></blockquote><p>实现签名还必须与重载签名兼容。例如，下面这些函数有错误，因为实现签名与重载不匹配:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">boolean</span></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error 参数类型不正确</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// 此重载签名与其实现签名不兼容</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">boolean</span></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error 返回类型不正确</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">boolean</span></span>;</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// 此重载签名与其实现签名不兼容</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;oops&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写优秀的重载函数"><a href="#编写优秀的重载函数" class="headerlink" title="编写优秀的重载函数"></a>编写优秀的重载函数</h3><p>与泛型一样，在使用函数重载时也应该遵循一些准则。遵循这些原则将使您的函数更容易调用、更容易理解和更容易实现。<br>让我们考虑一个返回字符串或数组长度的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>(<span class="params">arr: <span class="built_in">any</span>[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>(<span class="params">x: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数很好，我们可以用字符串或数组调用它。但是，我们不能用一个字符串或数组的值来调用它(因为就变成了联合类型)，因为 TypeScript 只能将一个函数调用解析为一个重载:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">len(<span class="string">&quot;&quot;</span>); <span class="comment">// OK</span></span><br><span class="line">len([<span class="number">0</span>]); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error 联合类型</span></span><br><span class="line">len(<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? <span class="string">&quot;hello&quot;</span> : [<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// No overload matches this call.</span></span><br><span class="line"><span class="comment">// Overload 1 of 2, &#x27;(s: string): number&#x27;, gave the following error.</span></span><br><span class="line"><span class="comment">//    Argument of type &#x27;number[] | &quot;hello&quot;&#x27; is not assignable to parameter of type &#x27;string&#x27;.</span></span><br><span class="line"><span class="comment">//      Type &#x27;number[]&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br><span class="line"><span class="comment">// Overload 2 of 2, &#x27;(arr: any[]): number&#x27;, gave the following error.</span></span><br><span class="line"><span class="comment">//   Argument of type &#x27;number[] | &quot;hello&quot;&#x27; is not assignable to parameter of type &#x27;any[]&#x27;.</span></span><br><span class="line"><span class="comment">//      Type &#x27;string&#x27; is not assignable to type &#x27;any[]&#x27;.</span></span><br></pre></td></tr></table></figure><p>因为两个重载有相同的参数计数和相同的返回类型，我们可以改写一个非重载版本的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>(<span class="params">x: <span class="built_in">any</span>[] | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样好多了！调用方可以使用任意一种值来调用这个函数，作为额外的好处，我们不需要找出正确的实现签名。</p><blockquote><p>如果可以的话，总是倾向于使用联合类型的参数，而不是重载</p></blockquote><h3 id="在函数中声明-this"><a href="#在函数中声明-this" class="headerlink" title="在函数中声明 this"></a>在函数中声明 <code>this</code></h3><p>TypeScript 将通过代码流分析推断函数中的 <code>this</code> 值应该是什么，例如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  id: <span class="number">123</span>,</span><br><span class="line"></span><br><span class="line">  admin: <span class="literal">false</span>,</span><br><span class="line">  becomeAdmin: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.admin = <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript 明白函数 <code>user.becomeAdmin</code> 有一个对应的 <code>this</code> 外部对象 <code>user</code>。对于很多情况来说，这已经足够了，但是在很多情况下，你需要更多地控制 <code>this</code> 代表的对象。JavaScript 规范规定不能有一个名为 <code>this</code> 的参数，因此 TypeScript 使用这个语法空间，让你在函数体中声明 <code>this</code> 的类型: </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> DB &#123;</span><br><span class="line">  filterUsers(filter: <span class="function">(<span class="params"><span class="built_in">this</span>: User</span>) =&gt;</span> <span class="built_in">boolean</span>): User[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = getDB();</span><br><span class="line"><span class="keyword">const</span> admins = db.filterUsers(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.isAdmin;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种模式在回调样式的API中很常见，其中另一个对象通常控制什么时候调用函数。注意，你需要使用 <code>function</code> 而不是箭头函数来获得这个行为:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = getDB();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> admins = db.filterUsers(<span class="function">() =&gt;</span> <span class="built_in">this</span>.isAdmin);</span><br><span class="line"><span class="comment">// ts报错信息</span></span><br><span class="line"><span class="comment">// The containing arrow function captures the global value of &#x27;this&#x27;.</span></span><br><span class="line"><span class="comment">// Element implicitly has an &#x27;any&#x27; type because type &#x27;typeof globalThis&#x27; has no index signature.</span></span><br></pre></td></tr></table></figure><h3 id="其他需要了解的类型"><a href="#其他需要了解的类型" class="headerlink" title="其他需要了解的类型"></a>其他需要了解的类型</h3><p>在使用函数类型时，还有一些其他类型需要了解，这些类型经常出现。像所有类型一样，您可以在任何地方使用它们，但是这些类型在函数的上下文中特别重要。</p><h4 id="void"><a href="#void" class="headerlink" title="void"></a><code>void</code></h4><p><code>void</code> 表示不返回值的函数的返回值。当函数没有 <code>return</code> 语句，或者返回语句没有返回任何明确的值时，它就是推断的类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推断的返回类型是void</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，不返回任何值的函数将隐式返回 <code>undefined</code> 。然而，<code>void</code> 和 <code>undefined</code> 在 TypeScript 中并不是一回事。在本章的最后还有更多的细节。</p><blockquote><p><code>void</code> 不等同于 <code>undefined</code></p></blockquote><h4 id="object"><a href="#object" class="headerlink" title="object"></a><code>object</code></h4><p>特殊类型 <code>object</code> 指的是任何不是原始类型的值(<code>string</code>, <code>number</code>, <code>boolean</code>, <code>symbol</code>, <code>null</code>, 或者 <code>undefined</code>)。这不同于空对象类型 <code>&#123;&#125;</code> ，也不同于全局类型 <code>Object</code>。很有可能你永远不会使用 <code>Object</code>。</p><blockquote><p><code>object</code> 不是 <code>Object</code>，总是使用 <code>object</code> </p></blockquote><p>注意，在 JavaScript 中，函数值是对象: 它们具有属性，在原型链中具有 <code>Object.prototype</code>，是 <code>instanceof Object</code>，可以在它们上面调用 <code>Object.keys</code> 等等。由于这个原因，函数类型在 TypeScript 中被认为是 <code>object</code>。</p><h4 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a><code>unknown</code></h4><p><code>unknown</code> 可以表示任何值 (表示未知的值)，这与 <code>any</code> 有点相似，但更安全，因为用 <code>unknown</code> 做任何事都是不合法的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  a.b(); <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">a: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Error</span></span><br><span class="line">  a.b();</span><br><span class="line">  <span class="comment">// ts报错信息</span></span><br><span class="line">  <span class="comment">// Object is of type &#x27;unknown&#x27;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这在描述函数类型时非常有用，因为您可以描述接受任何值但函数体中没有 <code>any</code> 的函数。<br>相反，你可以描述一个返回未知类型值的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeParse</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="title">unknown</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Need to be careful with &#x27;obj&#x27;!</span></span><br><span class="line"><span class="keyword">const</span> obj = safeParse(someRandomString);</span><br></pre></td></tr></table></figure><h4 id="never"><a href="#never" class="headerlink" title="never"></a><code>never</code></h4><p>有些函数从不返回值:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">msg: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>never</code> 类型表示从未观察到的值。在返回类型中，这意味着该函数抛出异常或终止程序的执行。<br>当 TypeScript 确定联合类型中没有剩余的内容时，<code>never</code> 也会出现。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x; <span class="comment">// has type &#x27;never&#x27;!</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a><code>Function</code></h4><p>全局类型 <code>Function</code> 描述了 JavaScript 中所有函数值上的属性，如 <code>bind</code>、<code>call</code> 、<code>apply</code> 等。它还有一个特殊属性，即 <code>Function</code> 类型的值总是可以被调用; 这些调用返回 <code>any</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">f: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">  f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个非类型化的函数调用，通常最好避免这种情况，因为返回类型 <code>any</code> 是不安全的。<br>如果需要接受一个任意函数，但不打算调用它，那么类型 <code>() =&gt; void</code> 通常更安全。</p><h3 id="Rest-形参和实参"><a href="#Rest-形参和实参" class="headerlink" title="Rest 形参和实参"></a><code>Rest</code> 形参和实参</h3><h4 id="Rest形参"><a href="#Rest形参" class="headerlink" title="Rest形参"></a><code>Rest</code>形参</h4><p>除了使用可选参数或重载使函数可以接受各种固定的参数数量，我们还可以定义使用 <code>rest</code> 参数接受无限个参数的函数。<br>在所有其他参数之后会出现一个 <code>rest</code> 参数，它使用 <code>...</code> 语法:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">n: <span class="built_in">number</span>, ...m: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m.map(<span class="function">(<span class="params">x</span>) =&gt;</span> n * x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27; gets value [10, 20, 30, 40]</span></span><br><span class="line"><span class="keyword">const</span> a = multiply(<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>在 TypeScript 中，这些参数上的类型注释隐式地是 <code>any[]</code> 而不是 <code>any</code>，并且给出的任何类型注释都必须是 <code>Array&lt;T&gt;</code> 或 <code>T[]</code> 这样的形式，或者是一个元组类型(我们将在后面学习)。</p><h4 id="Rest实参"><a href="#Rest实参" class="headerlink" title="Rest实参"></a><code>Rest</code>实参</h4><p>我们可以使用扩展语法从数组中提供可变数量的实参。例如，数组的 <code>push</code> 方法接受任意数量的参数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure><p>注意，一般来说，TypeScript 并不假定数组是不可变的，这会产生一些令人疑惑的行为:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推断出 args的类型为 number[] —— &quot;一个包含0或者多个数字的数组&quot;,</span></span><br><span class="line"><span class="comment">// 不是两个数字</span></span><br><span class="line"><span class="comment">// 而 Math.atan2() 只能接收两个数字，所以报错了</span></span><br><span class="line"><span class="keyword">const</span> args = [<span class="number">8</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="keyword">const</span> angle = <span class="built_in">Math</span>.atan2(...args);</span><br><span class="line"><span class="comment">// ts报错</span></span><br><span class="line"><span class="comment">// Expected 2 arguments, but got 0 or more.</span></span><br></pre></td></tr></table></figure><p>对于这种情况，最好的解决办法有点取决于你的代码，但是一般来说，<code>const</code> 上下文是最直接的解决方案:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推断为长度为2的元组</span></span><br><span class="line"><span class="keyword">const</span> args = [<span class="number">8</span>, <span class="number">5</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> angle = <span class="built_in">Math</span>.atan2(...args);</span><br></pre></td></tr></table></figure><p>使用 rest 参数可能需要在针对旧的运行时打开 <a href="https://www.typescriptlang.org/tsconfig/#downlevelIteration">downlevelIteration</a>。</p><h3 id="参数析构"><a href="#参数析构" class="headerlink" title="参数析构"></a>参数析构</h3><p>你可以使用参数析构来方便地将作为参数提供的对象解压缩到函数体中的一个或多个局部变量中。在 JavaScript 中，它是这样的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">&#123; a, b, c &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b + c);</span><br><span class="line">&#125;</span><br><span class="line">sum(&#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">9</span> &#125;);</span><br></pre></td></tr></table></figure><p>对象的类型注释在析构化语法之后:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">&#123; a, b, c &#125;: &#123; a: <span class="built_in">number</span>; b: <span class="built_in">number</span>; c: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看起来有点冗长，但是你也可以在这里使用命名类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和前面的类型一样</span></span><br><span class="line"><span class="keyword">type</span> ABC = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; b: <span class="built_in">number</span>; c: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">&#123; a, b, c &#125;: ABC</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b + c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的可转让性"><a href="#函数的可转让性" class="headerlink" title="函数的可转让性"></a>函数的可转让性</h3><h4 id="返回-void-类型"><a href="#返回-void-类型" class="headerlink" title="返回 void 类型"></a>返回 <code>void</code> 类型</h4><p>函数的 <code>void</code> 返回类型可以产生一些不寻常但是符合预期的行为。<br>返回类型为 <code>void</code> 的上下文类型不会强制函数不返回某些内容。另一种说法是，带有 <code>void</code> 返回类型( <code>type vf = () =&gt; void</code> )的上下文函数类型在实现时可以返回任何其他值，但它将被忽略。<br>因此，<code>type () =&gt; void</code> 的下列实现是有效的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> voidFunc = <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1: voidFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2: voidFunc = <span class="function">() =&gt;</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f3: voidFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当其中一个函数的返回值被赋给另一个变量时，它将保留 <code>void</code> 类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = f1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v2 = f2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v3 = f3();</span><br></pre></td></tr></table></figure><p>此行为的存在使得下面的代码即使在 <code>Array.prototype.forEach</code> 方法期望返回类型为 <code>void</code>，然而 <code>Array.prototype.push</code> 返回了一个数字的情况下也是有效的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> src = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> dst = [<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// push方法返回数组新长度number</span></span><br><span class="line">src.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> dst.push(el));</span><br></pre></td></tr></table></figure><h2 id="对象类型-1"><a href="#对象类型-1" class="headerlink" title="对象类型"></a>对象类型</h2><p>在 JavaScript 中，我们分组和传递数据的基本方式是通过对象。在打字稿中，我们通过对象类型来表示这些内容。<br>就像下面这样，它们可以是匿名的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person: &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + person.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以通过接口定义：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + person.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是别名：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + person.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的三个示例中，我们编写了几个函数，它们接受包含属性 <code>name</code> (必须是 <code>string</code> )和 <code>age</code> (必须是 <code>number</code> )的对象。</p><h3 id="属性修饰符"><a href="#属性修饰符" class="headerlink" title="属性修饰符"></a>属性修饰符</h3><p>对象类型中的每个属性可以指定两个事项: 类型、属性是否可选以及属性是否可写。</p><h4 id="可选属性-1"><a href="#可选属性-1" class="headerlink" title="可选属性"></a>可选属性</h4><p>大多数时候，我们会发现自己处理的对象可能有一个属性集。在这些情况下，我们可以在它们的名字后面添加一个问号(<code>?</code>)将这些属性标记为可选的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> PaintOptions &#123;</span><br><span class="line">  shape: Shape;</span><br><span class="line">  xPos?: <span class="built_in">number</span>;</span><br><span class="line">  yPos?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintShape</span>(<span class="params">opts: PaintOptions</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shape = getShape();</span><br><span class="line">paintShape(&#123; shape &#125;);</span><br><span class="line">paintShape(&#123; shape, <span class="attr">xPos</span>: <span class="number">100</span> &#125;);</span><br><span class="line">paintShape(&#123; shape, <span class="attr">yPos</span>: <span class="number">100</span> &#125;);</span><br><span class="line">paintShape(&#123; shape, <span class="attr">xPos</span>: <span class="number">100</span>, <span class="attr">yPos</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>在本例中，<code>xPos</code> 和 <code>yPos</code> 都被认为是可选的。我们可以选择提供其中任何一个，因此上面对 <code>paintShape</code> 的每个调用都是有效的。所有可选性真正说的是，如果属性是设置的，它最好有一个特定的类型。所有的可选属性实际上就是表明：如果要设置一个属性，那么它最好符合特定类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> PaintOptions &#123;</span><br><span class="line">  shape: Shape;</span><br><span class="line">  xPos?: <span class="built_in">number</span>;</span><br><span class="line">  yPos?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintShape</span>(<span class="params">opts: PaintOptions</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shape = getShape();</span><br><span class="line">paintShape(&#123; shape &#125;);</span><br><span class="line">paintShape(&#123; shape, <span class="attr">xPos</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>我们也可以从这些属性中进行读取(但是当我们在 <code>strictnullcheck</code> 模式下进行读取时，TypeScript 会告诉我们它们可能是 <code>undefined</code> 。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintShape</span>(<span class="params">opts: PaintOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xPos = opts.xPos;</span><br><span class="line">  <span class="comment">//  ^ = (property) PaintOptions.xPos?: number | undefined</span></span><br><span class="line">  <span class="keyword">let</span> yPos = opts.yPos;</span><br><span class="line">  <span class="comment">//  ^ = (property) PaintOptions.yPos?: number | undefined</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，即使这个属性从来没有被设置过，我们仍然可以访问它 —— 它只会给我们一个 <code>undefined</code>。我们只能处理 <code>undefined</code> 的特殊情况：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintShape</span>(<span class="params">opts: PaintOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xPos = opts.xPos === <span class="literal">undefined</span> ? <span class="number">0</span> : opts.xPos;</span><br><span class="line">  <span class="comment">//    ^ = let xPos: number</span></span><br><span class="line">  <span class="keyword">let</span> yPos = opts.yPos === <span class="literal">undefined</span> ? <span class="number">0</span> : opts.yPos;</span><br><span class="line">  <span class="comment">//    ^ = let yPos: number</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这种为未指定值设置默认值的模式非常常见，而且 JavaScript 有语法支持它。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintShape</span>(<span class="params">&#123; shape, xPos = <span class="number">0</span>, yPos = <span class="number">0</span> &#125;: PaintOptions</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;x coordinate at&quot;</span>, xPos);</span><br><span class="line">  <span class="comment">//  ^ = var xPos: number</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;y coordinate at&quot;</span>, yPos);</span><br><span class="line">  <span class="comment">//  ^ = var yPos: number</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们为 paintShape 的参数使用了析构模式，并为 xPos 和 yPos 提供了默认值。现在，xPos 和 yPos 都肯定存在于 paintShape 的 body 中，但是对于任何调用 paintShape 的人来说都是可选的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;TypeScript 是一种开源语言，它建立在 JavaScript (世界上最常用的工具之一)的基础上，通过添加静态类型定义的方式来验证代码是否正常工作。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Eslint基本使用</title>
    <link href="http://example.com/2021/03/28/1-Eslint%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/03/28/1-Eslint%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-27T17:12:04.000Z</published>
    <updated>2021-04-10T22:27:01.191Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述Eslint的基本使用和相关配置</p><span id="more"></span><h3 id="安装-Eslint"><a href="#安装-Eslint" class="headerlink" title="安装 Eslint"></a>安装 Eslint</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//可以全局安装或者局部安装</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm i eslint --save-dev</span></span><br></pre></td></tr></table></figure><h3 id="配置vscode"><a href="#配置vscode" class="headerlink" title="配置vscode"></a>配置vscode</h3><p>在 vscode 里安装<code>Eslint</code>扩展<br><img src="https://ae01.alicdn.com/kf/U16b61684dc4a4dbb811ad3e6311aed93O.jpg"></p><h3 id="初始化Eslint"><a href="#初始化Eslint" class="headerlink" title="初始化Eslint"></a>初始化Eslint</h3><p>在项目终端中输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> eslint --init</span></span><br></pre></td></tr></table></figure><p>然后按照步骤选择就行，有几项选择视项目而定，例如：<br><img src="https://ae01.alicdn.com/kf/U612abd3ae3e0466a8768dafa701bd6a4t.jpg"></p><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>经过上一步初始化完成之后，会在项目目录生成一个<code>.eslintrc.js</code>配置文件，就可以在里面配置规则了，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">&#x27;env&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;browser&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;commonjs&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;es2021&#x27;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;extends&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;standard&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;parserOptions&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;ecmaVersion&#x27;</span>: <span class="number">12</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;rules&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-alert&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line">    <span class="string">&#x27;no-array-constructor&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line">    <span class="string">&#x27;no-bitwise&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line">    <span class="string">&#x27;no-caller&#x27;</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line">    <span class="string">&#x27;no-catch-shadow&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line">    <span class="string">&#x27;no-class-assign&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line">    <span class="string">&#x27;no-cond-assign&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用console</span></span><br><span class="line">    <span class="string">&#x27;no-const-assign&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line">    <span class="string">&#x27;no-constant-condition&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line">    <span class="string">&#x27;no-continue&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line">    <span class="string">&#x27;no-control-regex&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line">    <span class="string">&#x27;no-delete-var&#x27;</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line">    <span class="string">&#x27;no-div-regex&#x27;</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line">    <span class="string">&#x27;no-dupe-keys&#x27;</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line">    <span class="string">&#x27;no-dupe-args&#x27;</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line">    <span class="string">&#x27;no-duplicate-case&#x27;</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line">    <span class="string">&#x27;no-else-return&#x27;</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line">    <span class="string">&#x27;no-empty&#x27;</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line">    <span class="string">&#x27;no-empty-character-class&#x27;</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line">    <span class="string">&#x27;no-eq-null&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line">    <span class="string">&#x27;no-eval&#x27;</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line">    <span class="string">&#x27;no-ex-assign&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line">    <span class="string">&#x27;no-extend-native&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line">    <span class="string">&#x27;no-extra-bind&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line">    <span class="string">&#x27;no-extra-boolean-cast&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line">    <span class="string">&#x27;no-extra-parens&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line">    <span class="string">&#x27;no-extra-semi&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line">    <span class="string">&#x27;no-fallthrough&#x27;</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line">    <span class="string">&#x27;no-floating-decimal&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line">    <span class="string">&#x27;no-func-assign&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line">    <span class="string">&#x27;no-implicit-coercion&#x27;</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line">    <span class="string">&#x27;no-implied-eval&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line">    <span class="string">&#x27;no-inline-comments&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line">    <span class="string">&#x27;no-inner-declarations&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;functions&#x27;</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line">    <span class="string">&#x27;no-invalid-regexp&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line">    <span class="string">&#x27;no-invalid-this&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line">    <span class="string">&#x27;no-irregular-whitespace&#x27;</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line">    <span class="string">&#x27;no-iterator&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line">    <span class="string">&#x27;no-label-var&#x27;</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line">    <span class="string">&#x27;no-labels&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line">    <span class="string">&#x27;no-lone-blocks&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line">    <span class="string">&#x27;no-lonely-if&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line">    <span class="string">&#x27;no-loop-func&#x27;</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line">    <span class="string">&#x27;no-mixed-requires&#x27;</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line">    <span class="string">&#x27;no-mixed-spaces-and-tabs&#x27;</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line">    <span class="string">&#x27;linebreak-style&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;windows&#x27;</span>],<span class="comment">//换行风格</span></span><br><span class="line">    <span class="string">&#x27;no-multi-spaces&#x27;</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line">    <span class="string">&#x27;no-multi-str&#x27;</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line">    <span class="string">&#x27;no-multiple-empty-lines&#x27;</span>: [<span class="number">1</span>, &#123;<span class="string">&#x27;max&#x27;</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line">    <span class="string">&#x27;no-native-reassign&#x27;</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line">    <span class="string">&#x27;no-negated-in-lhs&#x27;</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line">    <span class="string">&#x27;no-nested-ternary&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line">    <span class="string">&#x27;no-new&#x27;</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line">    <span class="string">&#x27;no-new-func&#x27;</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line">    <span class="string">&#x27;no-new-object&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line">    <span class="string">&#x27;no-new-require&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line">    <span class="string">&#x27;no-new-wrappers&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line">    <span class="string">&#x27;no-obj-calls&#x27;</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line">    <span class="string">&#x27;no-octal&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line">    <span class="string">&#x27;no-octal-escape&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line">    <span class="string">&#x27;no-param-reassign&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line">    <span class="string">&#x27;no-path-concat&#x27;</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line">    <span class="string">&#x27;no-plusplus&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line">    <span class="string">&#x27;no-process-env&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line">    <span class="string">&#x27;no-process-exit&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line">    <span class="string">&#x27;no-proto&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line">    <span class="string">&#x27;no-redeclare&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line">    <span class="string">&#x27;no-regex-spaces&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line">    <span class="string">&#x27;no-restricted-modules&#x27;</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line">    <span class="string">&#x27;no-return-assign&#x27;</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line">    <span class="string">&#x27;no-script-url&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line">    <span class="string">&#x27;no-self-compare&#x27;</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line">    <span class="string">&#x27;no-sequences&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line">    <span class="string">&#x27;no-shadow&#x27;</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line">    <span class="string">&#x27;no-shadow-restricted-names&#x27;</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line">    <span class="string">&#x27;no-spaced-func&#x27;</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line">    <span class="string">&#x27;no-sparse-arrays&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line">    <span class="string">&#x27;no-sync&#x27;</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line">    <span class="string">&#x27;no-ternary&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line">    <span class="string">&#x27;no-trailing-spaces&#x27;</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line">    <span class="string">&#x27;no-this-before-super&#x27;</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line">    <span class="string">&#x27;no-throw-literal&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line">    <span class="string">&#x27;no-undef&#x27;</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line">    <span class="string">&#x27;no-undef-init&#x27;</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line">    <span class="string">&#x27;no-unexpected-multiline&#x27;</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line">    <span class="comment">//&#x27;no-underscore-dangle&#x27;: 1,//标识符不能以_开头或结尾</span></span><br><span class="line">    <span class="string">&#x27;no-unneeded-ternary&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line">    <span class="string">&#x27;no-unreachable&#x27;</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line">    <span class="string">&#x27;no-unused-expressions&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line">    <span class="string">&#x27;no-unused-vars&#x27;</span>: [<span class="number">2</span>, &#123;<span class="string">&#x27;vars&#x27;</span>: <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: <span class="string">&#x27;after-used&#x27;</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line">    <span class="string">&#x27;no-use-before-define&#x27;</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line">    <span class="string">&#x27;no-useless-call&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line">    <span class="string">&#x27;no-void&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line">    <span class="string">&#x27;no-var&#x27;</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line">    <span class="string">&#x27;no-warning-comments&#x27;</span>: [<span class="number">1</span>, &#123; <span class="string">&#x27;terms&#x27;</span>: [<span class="string">&#x27;todo&#x27;</span>, <span class="string">&#x27;fixme&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>], <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;start&#x27;</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line">    <span class="string">&#x27;no-with&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;array-bracket-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line">    <span class="string">&#x27;arrow-parens&#x27;</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line">    <span class="string">&#x27;arrow-spacing&#x27;</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line">    <span class="string">&#x27;accessor-pairs&#x27;</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line">    <span class="string">&#x27;block-scoped-var&#x27;</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line">    <span class="string">&#x27;brace-style&#x27;</span>: [<span class="number">1</span>, <span class="string">&#x27;1tbs&#x27;</span>],<span class="comment">//大括号风格</span></span><br><span class="line">    <span class="comment">//&#x27;callback-return&#x27;: 1,//避免多次调用回调什么的</span></span><br><span class="line">    <span class="string">&#x27;camelcase&#x27;</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line">    <span class="string">&#x27;comma-dangle&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line">    <span class="string">&#x27;comma-spacing&#x27;</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line">    <span class="string">&#x27;comma-style&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;last&#x27;</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line">    <span class="string">&#x27;complexity&#x27;</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line">    <span class="string">&#x27;computed-property-spacing&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line">    <span class="string">&#x27;consistent-return&#x27;</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line">    <span class="string">&#x27;consistent-this&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;that&#x27;</span>],<span class="comment">//this别名</span></span><br><span class="line">    <span class="string">&#x27;constructor-super&#x27;</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line">    <span class="string">&#x27;curly&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;all&#x27;</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line">    <span class="string">&#x27;default-case&#x27;</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line">    <span class="string">&#x27;dot-location&#x27;</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line">    <span class="string">&#x27;dot-notation&#x27;</span>: [<span class="number">0</span>, &#123; <span class="string">&#x27;allowKeywords&#x27;</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line">    <span class="string">&#x27;eol-last&#x27;</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line">    <span class="string">&#x27;eqeqeq&#x27;</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line">    <span class="string">&#x27;func-names&#x27;</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line">    <span class="string">&#x27;func-style&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;declaration&#x27;</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line">    <span class="string">&#x27;generator-star-spacing&#x27;</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line">    <span class="string">&#x27;guard-for-in&#x27;</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line">    <span class="string">&#x27;handle-callback-err&#x27;</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line">    <span class="string">&#x27;id-length&#x27;</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line">    <span class="string">&#x27;indent&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="number">2</span>],<span class="comment">//缩进风格</span></span><br><span class="line">    <span class="string">&#x27;init-declarations&#x27;</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line">    <span class="string">&#x27;key-spacing&#x27;</span>: [<span class="number">0</span>, &#123; <span class="string">&#x27;beforeColon&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;afterColon&#x27;</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line">    <span class="string">&#x27;lines-around-comment&#x27;</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line">    <span class="string">&#x27;max-depth&#x27;</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line">    <span class="string">&#x27;max-len&#x27;</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line">    <span class="string">&#x27;max-nested-callbacks&#x27;</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line">    <span class="string">&#x27;max-params&#x27;</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line">    <span class="string">&#x27;max-statements&#x27;</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line">    <span class="string">&#x27;new-cap&#x27;</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line">    <span class="string">&#x27;new-parens&#x27;</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line">    <span class="string">&#x27;newline-after-var&#x27;</span>: <span class="number">0</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line">    <span class="string">&#x27;object-curly-spacing&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line">    <span class="string">&#x27;object-shorthand&#x27;</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line">    <span class="string">&#x27;one-var&#x27;</span>: <span class="number">0</span>,<span class="comment">//连续声明</span></span><br><span class="line">    <span class="string">&#x27;operator-assignment&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;always&#x27;</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line">    <span class="string">&#x27;operator-linebreak&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;after&#x27;</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line">    <span class="string">&#x27;padded-blocks&#x27;</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line">    <span class="string">&#x27;prefer-const&#x27;</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line">    <span class="string">&#x27;prefer-spread&#x27;</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line">    <span class="string">&#x27;prefer-reflect&#x27;</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line">    <span class="string">&#x27;quotes&#x27;</span>: [<span class="number">1</span>, <span class="string">&#x27;single&#x27;</span>],<span class="comment">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;quote-props&#x27;</span>:[<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line">    <span class="string">&#x27;radix&#x27;</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line">    <span class="string">&#x27;id-match&#x27;</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line">    <span class="string">&#x27;require-yield&#x27;</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line">    <span class="comment">//&#x27;semi&#x27;: [2, &#x27;always&#x27;],//语句强制分号结尾</span></span><br><span class="line">    <span class="comment">//&#x27;semi-spacing&#x27;: [0, &#123;&#x27;before&#x27;: false, &#x27;after&#x27;: true&#125;],//分号前后空格</span></span><br><span class="line">    <span class="string">&#x27;sort-vars&#x27;</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line">    <span class="string">&#x27;space-after-keywords&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;always&#x27;</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line">    <span class="string">&#x27;space-before-blocks&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;always&#x27;</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line">    <span class="string">&#x27;space-before-function-paren&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;always&#x27;</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line">    <span class="string">&#x27;space-in-parens&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line">    <span class="string">&#x27;space-infix-ops&#x27;</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line">    <span class="string">&#x27;keyword-spacing&#x27;</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line">    <span class="string">&#x27;space-unary-ops&#x27;</span>: [<span class="number">0</span>, &#123; <span class="string">&#x27;words&#x27;</span>: <span class="literal">true</span>, <span class="string">&#x27;nonwords&#x27;</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line">    <span class="string">&#x27;spaced-comment&#x27;</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line">    <span class="string">&#x27;strict&#x27;</span>: <span class="number">0</span>,<span class="comment">//使用严格模式</span></span><br><span class="line">    <span class="string">&#x27;use-isnan&#x27;</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line">    <span class="string">&#x27;valid-jsdoc&#x27;</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line">    <span class="string">&#x27;valid-typeof&#x27;</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line">    <span class="string">&#x27;vars-on-top&#x27;</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line">    <span class="string">&#x27;wrap-iife&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;inside&#x27;</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line">    <span class="string">&#x27;wrap-regex&#x27;</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line">    <span class="string">&#x27;yoda&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>]<span class="comment">//禁止尤达条件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重启vscode"><a href="#重启vscode" class="headerlink" title="重启vscode"></a>重启vscode</h3><p>如果Eslint没有运行，则重启项目，这样vscode的eslint扩展就开始工作了，有不符合规则的地方会有红线提示，可以点击修复就行了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文讲述Eslint的基本使用和相关配置&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Eslint" scheme="http://example.com/tags/Eslint/"/>
    
  </entry>
  
</feed>
